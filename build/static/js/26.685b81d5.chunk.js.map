{"version":3,"sources":["queries/adminQuery.ts","../../../../src/react/hooks/useApolloClient.ts","../../../../src/react/parser/index.ts","../../../../src/react/hooks/useQuery.ts","../../../../src/react/hooks/useMutation.ts","pages/Admin/LinkManager/styles.tsx","pages/Admin/VideoLink/index.tsx"],"names":["CREATE_BOARD","gql","GET_BOARD_BY_CATEGORY","DELETE_BOARD","EDIT_BOARD","DELETE_FILE","DELETE_IMAGE","CREATE_FILE","CREATE_IMAGE","DELETE_LINK","EDIT_POPUP","CREATE_REPLY","DELETE_REPLY","useApolloClient","override","context","client","DocumentType","cache","Map","operationName","type","name","Query","Mutation","Subscription","document","variables","cached","get","fragments","definitions","filter","x","kind","queries","operation","mutations","subscriptions","length","definition","useQuery","query","options","partial","watchQueryOptions","createWatchQueryOptions","obsQuery","renderPromises","getSSRObservable","watchQuery","registerSSRObservable","ssr","skip","getCurrentResult","loading","addQueryPromise","getOptions","fetchData","Promise","resolve","sub","subscribe","next","result","unsubscribe","error","complete","setObsQuery","onError","data","onCompleted","setResult","ref","previousData","nextResult","current","setOptions","catch","previousResult","Object","assign","subscription","onNext","last","resetLastResults","hasOwnProperty","networkStatus","disableNetworkFetches","partialRefetch","keys","fetchPolicy","refetch","ready","errors","graphQLErrors","obsQueryFields","bind","fetchMore","updateQuery","startPolling","stopPolling","subscribeToMore","called","useMutation","mutation","mutationId","isMounted","execute","executeOptions","baseOptions","ignoreResults","clientOptions","mutate","then","response","reset","Container","styled","div","Content","VideoLink","useState","videoId","setVideoId","useInput","url","onChangeUrl","setUrl","inputOpen","setInputOpen","category","getBoardByCategory","ok","err","link","split","console","log","createBoard","toast","success","window","location","reload","createBoardMutation","handleSubmit","useCallback","a","title","content","res","className","onClick","StyledInput","value","onChange","opts","height","width","playerVars","autoplay","onReady","e","target","pauseVideo","Input"],"mappings":"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","file":"static/js/26.685b81d5.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\n\nexport const CREATE_BOARD = gql`\n  mutation createBoard(\n    $title: String\n    $content: String\n    $category: String!\n    $files: [AttachModel]\n    $images: [AttachModel]\n    $link: String\n    $type: String\n    $private: Boolean\n    $writer: String\n  ) {\n    createBoard(\n      title: $title\n      content: $content\n      category: $category\n      files: $files\n      images: $images\n      link: $link\n      type: $type\n      private: $private\n      writer: $writer\n    ) {\n      ok\n      err\n    }\n  }\n`;\n\nexport const GET_BOARD_BY_CATEGORY = gql`\n  query getBoardByCategory($category: String!) {\n    getBoardByCategory(category: $category) {\n      ok\n      err\n      data {\n        id\n        title\n        content\n        category\n        private\n        type\n        writer\n        files {\n          id\n          url\n          fileName\n        }\n        images {\n          id\n          url\n          fileName\n        }\n        link\n        createdAt\n        updatedAt\n        deleteAt\n      }\n    }\n  }\n`;\n\nexport const DELETE_BOARD = gql`\n  mutation deleteBoard($id: Int!) {\n    deleteBoard(id: $id) {\n      ok\n      err\n    }\n  }\n`;\n\nexport const EDIT_BOARD = gql`\n  mutation editBoard(\n    $id: Int!\n    $title: String\n    $content: String\n    $link: String\n    $private: Boolean\n    $type: String\n  ) {\n    editBoard(\n      id: $id\n      title: $title\n      content: $content\n      link: $link\n      private: $private\n      type: $type\n    ) {\n      ok\n      err\n    }\n  }\n`;\n\nexport const EDIT_FILE = gql`\n  mutation editFile($id: Int!, $url: String!, $fileName: String!) {\n    editFile(id: $id, url: $url, fileName: $fileName) {\n      ok\n      err\n    }\n  }\n`;\n\nexport const EDIT_IMAGE = gql`\n  mutation editImage($id: Int!, $url: String!, $fileName: String!) {\n    editImage(id: $id, url: $url, fileName: $fileName) {\n      ok\n      err\n    }\n  }\n`;\n\nexport const DELETE_FILE = gql`\n  mutation deleteFile($id: Int!) {\n    deleteFile(id: $id) {\n      ok\n      err\n    }\n  }\n`;\n\nexport const DELETE_IMAGE = gql`\n  mutation deleteImage($id: Int!) {\n    deleteImage(id: $id) {\n      ok\n      err\n    }\n  }\n`;\n\nexport const CREATE_FILE = gql`\n  mutation createFile($url: String!, $fileName: String!, $boardId: Int!) {\n    createFile(url: $url, fileName: $fileName, boardId: $boardId) {\n      ok\n      err\n    }\n  }\n`;\n\nexport const CREATE_IMAGE = gql`\n  mutation createImage($url: String!, $fileName: String!, $boardId: Int!) {\n    createImage(url: $url, fileName: $fileName, boardId: $boardId) {\n      ok\n      err\n    }\n  }\n`;\n\nexport const CREATE_LINK = gql`\n  mutation createLink($title: String!, $url: String!) {\n    createLink(title: $title, url: $url) {\n      ok\n      err\n    }\n  }\n`;\n\nexport const DELETE_LINK = gql`\n  mutation deleteLink($id: Int!) {\n    deleteLink(id: $id) {\n      ok\n      err\n    }\n  }\n`;\n\nexport const EDIT_LINK = gql`\n  mutation editLink($id: Int!, $title: String, $url: String) {\n    editLink(id: $id, title: $title, url: $url) {\n      ok\n      err\n    }\n  }\n`;\n\nexport const EDIT_POPUP = gql`\n  mutation editPopup($up: String!, $url: String) {\n    editPopup(up: $up, url: $url) {\n      ok\n      err\n    }\n  }\n`;\n\nexport const CREATE_REPLY = gql`\n  mutation createReply($boardId: Int!, $content: String!) {\n    createReply(boardId: $boardId, content: $content) {\n      ok\n      err\n    }\n  }\n`;\nexport const EDIT_REPLY = gql`\n  mutation editReply($replyId: Int!, $content: String) {\n    editReply(replyId: $replyId, content: $content) {\n      ok\n      err\n    }\n  }\n`;\n\nexport const DELETE_REPLY = gql`\n  mutation deleteReply($replyId: Int!) {\n    deleteReply(replyId: $replyId) {\n      ok\n      err\n    }\n  }\n`;\n","import { invariant } from '../../utilities/globals';\nimport { useContext } from 'react';\nimport { ApolloClient } from '../../core';\nimport { getApolloContext } from '../context';\n\nexport function useApolloClient(\n  override?: ApolloClient<object>,\n): ApolloClient<object> {\n  const context = useContext(getApolloContext());\n  const client = override || context.client;\n  invariant(\n    !!client,\n    'Could not find \"client\" in the context or passed in as an option. ' +\n    'Wrap the root component in an <ApolloProvider>, or pass an ApolloClient' +\n    'ApolloClient instance in via options.',\n  );\n\n  return client;\n}\n","import { invariant } from '../../utilities/globals';\n\nimport {\n  DocumentNode,\n  DefinitionNode,\n  VariableDefinitionNode,\n  OperationDefinitionNode\n} from 'graphql';\n\nexport enum DocumentType {\n  Query,\n  Mutation,\n  Subscription\n}\n\nexport interface IDocumentDefinition {\n  type: DocumentType;\n  name: string;\n  variables: ReadonlyArray<VariableDefinitionNode>;\n}\n\nconst cache = new Map();\n\nexport function operationName(type: DocumentType) {\n  let name;\n  switch (type) {\n    case DocumentType.Query:\n      name = 'Query';\n      break;\n    case DocumentType.Mutation:\n      name = 'Mutation';\n      break;\n    case DocumentType.Subscription:\n      name = 'Subscription';\n      break;\n  }\n  return name;\n}\n\n// This parser is mostly used to safety check incoming documents.\nexport function parser(document: DocumentNode): IDocumentDefinition {\n  const cached = cache.get(document);\n  if (cached) return cached;\n\n  let variables, type, name;\n\n  invariant(\n    !!document && !!document.kind,\n    `Argument of ${document} passed to parser was not a valid GraphQL ` +\n      `DocumentNode. You may need to use 'graphql-tag' or another method ` +\n      `to convert your operation into a document`\n  );\n\n  const fragments = document.definitions.filter(\n    (x: DefinitionNode) => x.kind === 'FragmentDefinition'\n  );\n\n  const queries = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'query'\n  );\n\n  const mutations = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'mutation'\n  );\n\n  const subscriptions = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'subscription'\n  );\n\n  invariant(\n    !fragments.length ||\n      (queries.length || mutations.length || subscriptions.length),\n    `Passing only a fragment to 'graphql' is not yet supported. ` +\n      `You must include a query, subscription or mutation as well`\n  );\n\n  invariant(\n    queries.length + mutations.length + subscriptions.length <= 1,\n    `react-apollo only supports a query, subscription, or a mutation per HOC. ` +\n      `${document} had ${queries.length} queries, ${subscriptions.length} ` +\n      `subscriptions and ${mutations.length} mutations. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n\n  const definitions = queries.length\n    ? queries\n    : mutations.length\n    ? mutations\n    : subscriptions;\n\n  invariant(\n    definitions.length === 1,\n    `react-apollo only supports one definition per HOC. ${document} had ` +\n      `${definitions.length} definitions. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  const definition = definitions[0] as OperationDefinitionNode;\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === 'Name') {\n    name = definition.name.value;\n  } else {\n    name = 'data'; // fallback to using data if no name\n  }\n\n  const payload = { name, type, variables };\n  cache.set(document, payload);\n  return payload;\n}\n\nexport function verifyDocumentType(document: DocumentNode, type: DocumentType) {\n  const operation = parser(document);\n  const requiredOperationName = operationName(type);\n  const usedOperationName = operationName(operation.type);\n  invariant(\n    operation.type === type,\n    `Running a ${requiredOperationName} requires a graphql ` +\n      `${requiredOperationName}, but a ${usedOperationName} was used instead.`\n  );\n}\n\n","import { useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport { equal } from '@wry/equality';\nimport { OperationVariables } from '../../core';\nimport { getApolloContext } from '../context';\nimport { ApolloError } from '../../errors';\nimport {\n  ApolloQueryResult,\n  NetworkStatus,\n  ObservableQuery,\n  DocumentNode,\n  TypedDocumentNode,\n  WatchQueryOptions,\n} from '../../core';\nimport {\n  QueryHookOptions,\n  QueryResult,\n} from '../types/types';\n\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport { useApolloClient } from './useApolloClient';\n\nexport function useQuery<\n  TData = any,\n  TVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: QueryHookOptions<TData, TVariables>,\n): QueryResult<TData, TVariables> {\n  const context = useContext(getApolloContext());\n  const client = useApolloClient(options?.client);\n  verifyDocumentType(query, DocumentType.Query);\n  const [obsQuery, setObsQuery] = useState(() => {\n    const watchQueryOptions = createWatchQueryOptions(query, options);\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    let obsQuery: ObservableQuery<TData, TVariables> | null = null;\n    if (context.renderPromises) {\n      obsQuery = context.renderPromises.getSSRObservable(watchQueryOptions);\n    }\n\n    if (!obsQuery) {\n      // Is it safe (StrictMode/memory-wise) to call client.watchQuery here?\n      obsQuery = client.watchQuery(watchQueryOptions);\n      if (context.renderPromises) {\n        context.renderPromises.registerSSRObservable(\n          obsQuery,\n          watchQueryOptions,\n        );\n      }\n    }\n\n    if (\n      context.renderPromises &&\n      options?.ssr !== false &&\n      !options?.skip &&\n      obsQuery.getCurrentResult().loading\n    ) {\n      // TODO: This is a legacy API which could probably be cleaned up\n      context.renderPromises.addQueryPromise(\n        {\n          // The only options which seem to actually be used by the\n          // RenderPromises class are query and variables.\n          getOptions: () => createWatchQueryOptions(query, options),\n          fetchData: () => new Promise<void>((resolve) => {\n            const sub = obsQuery!.subscribe({\n              next(result) {\n                if (!result.loading) {\n                  resolve()\n                  sub.unsubscribe();\n                }\n              },\n              error() {\n                resolve();\n                sub.unsubscribe();\n              },\n              complete() {\n                resolve();\n              },\n            });\n          }),\n        },\n        // This callback never seemed to do anything\n        () => null,\n      );\n    }\n\n    return obsQuery;\n  });\n\n  let [result, setResult] = useState(() => {\n    const result = obsQuery.getCurrentResult();\n    if (!result.loading && options) {\n      if (result.error) {\n        options.onError?.(result.error);\n      } else if (result.data) {\n        options.onCompleted?.(result.data);\n      }\n    }\n\n    return result;\n  });\n\n  const ref = useRef({\n    client,\n    query,\n    options,\n    result,\n    previousData: void 0 as TData | undefined,\n    watchQueryOptions: createWatchQueryOptions(query, options),\n  });\n\n  // An effect to recreate the obsQuery whenever the client or query changes.\n  // This effect is also responsible for checking and updating the obsQuery\n  // options whenever they change.\n  useEffect(() => {\n    const watchQueryOptions = createWatchQueryOptions(query, options);\n    let nextResult: ApolloQueryResult<TData> | undefined;\n    if (ref.current.client !== client || !equal(ref.current.query, query)) {\n      const obsQuery = client.watchQuery(watchQueryOptions);\n      setObsQuery(obsQuery);\n      nextResult = obsQuery.getCurrentResult();\n    } else if (!equal(ref.current.watchQueryOptions, watchQueryOptions)) {\n      obsQuery.setOptions(watchQueryOptions).catch(() => {});\n      nextResult = obsQuery.getCurrentResult();\n      ref.current.watchQueryOptions = watchQueryOptions;\n    }\n\n    if (nextResult) {\n      const previousResult = ref.current.result;\n      if (previousResult.data) {\n        ref.current.previousData = previousResult.data;\n      }\n\n      setResult(ref.current.result = nextResult);\n      if (!nextResult.loading && options) {\n        if (!result.loading) {\n          if (result.error) {\n            options.onError?.(result.error);\n          } else if (result.data) {\n            options.onCompleted?.(result.data);\n          }\n        }\n      }\n    }\n\n    Object.assign(ref.current, { client, query });\n  }, [obsQuery, client, query, options]);\n\n  // An effect to subscribe to the current observable query\n  useEffect(() => {\n    if (context.renderPromises) {\n      return;\n    }\n\n    let subscription = obsQuery.subscribe(onNext, onError);\n    // We use `getCurrentResult()` instead of the callback argument because\n    // the values differ slightly. Specifically, loading results will have\n    // an empty object for data instead of `undefined` for some reason.\n    function onNext() {\n      const previousResult = ref.current.result;\n      const result = obsQuery.getCurrentResult();\n      // Make sure we're not attempting to re-render similar results\n      if (\n        previousResult &&\n        previousResult.loading === result.loading &&\n        previousResult.networkStatus === result.networkStatus &&\n        equal(previousResult.data, result.data)\n      ) {\n        return;\n      }\n\n      if (previousResult.data) {\n        ref.current.previousData = previousResult.data;\n      }\n\n      setResult(ref.current.result = result);\n      if (!result.loading) {\n        ref.current.options?.onCompleted?.(result.data);\n      }\n    }\n\n    function onError(error: Error) {\n      const last = obsQuery[\"last\"];\n      subscription.unsubscribe();\n      // Unfortunately, if `lastError` is set in the current\n      // `observableQuery` when the subscription is re-created,\n      // the subscription will immediately receive the error, which will\n      // cause it to terminate again. To avoid this, we first clear\n      // the last error/result from the `observableQuery` before re-starting\n      // the subscription, and restore it afterwards (so the subscription\n      // has a chance to stay open).\n      try {\n        obsQuery.resetLastResults();\n        subscription = obsQuery.subscribe(onNext, onError);\n      } finally {\n        obsQuery[\"last\"] = last;\n      }\n\n      if (!error.hasOwnProperty('graphQLErrors')) {\n        // The error is not a GraphQL error\n        throw error;\n      }\n\n      const previousResult = ref.current.result;\n      if (\n        (previousResult && previousResult.loading) ||\n        !equal(error, previousResult.error)\n      ) {\n        setResult(ref.current.result = {\n          data: previousResult.data,\n          error: error as ApolloError,\n          loading: false,\n          networkStatus: NetworkStatus.error,\n        });\n        ref.current.options?.onError?.(error as ApolloError);\n      }\n    }\n\n    return () => subscription.unsubscribe();\n  }, [obsQuery, context.renderPromises, client.disableNetworkFetches]);\n\n  let partial: boolean | undefined;\n  ({ partial, ...result } = result);\n\n  {\n    // BAD BOY CODE BLOCK WHERE WE PUT SIDE-EFFECTS IN THE RENDER FUNCTION\n    //\n    // TODO: This code should be removed when the partialRefetch option is\n    // removed. I was unable to get this hook to behave reasonably in certain\n    // edge cases when this block was put in an effect.\n    if (\n      partial &&\n      options?.partialRefetch &&\n      !result.loading &&\n      (!result.data || Object.keys(result.data).length === 0) &&\n      obsQuery.options.fetchPolicy !== 'cache-only'\n    ) {\n      result = {\n        ...result,\n        loading: true,\n        networkStatus: NetworkStatus.refetch,\n      };\n\n      obsQuery.refetch();\n    }\n\n    // TODO: This is a hack to make sure useLazyQuery executions update the\n    // obsevable query options for ssr.\n    if (\n      context.renderPromises &&\n      options?.ssr !== false &&\n      !options?.skip &&\n      result.loading\n    ) {\n      obsQuery.setOptions(createWatchQueryOptions(query, options)).catch(() => {});\n    }\n\n    // We assign options during rendering as a guard to make sure that\n    // callbacks like onCompleted and onError are not stale.\n    Object.assign(ref.current, { options });\n  }\n\n  if (\n    (context.renderPromises || client.disableNetworkFetches) &&\n    options?.ssr === false\n  ) {\n    // If SSR has been explicitly disabled, and this function has been called\n    // on the server side, return the default loading state.\n    result = ref.current.result = {\n      loading: true,\n      data: void 0 as unknown as TData,\n      error: void 0,\n      networkStatus: NetworkStatus.loading,\n    };\n  } else if (options?.skip || options?.fetchPolicy === 'standby') {\n    // When skipping a query (ie. we're not querying for data but still want to\n    // render children), make sure the `data` is cleared out and `loading` is\n    // set to `false` (since we aren't loading anything).\n    //\n    // NOTE: We no longer think this is the correct behavior. Skipping should\n    // not automatically set `data` to `undefined`, but instead leave the\n    // previous data in place. In other words, skipping should not mandate that\n    // previously received data is all of a sudden removed. Unfortunately,\n    // changing this is breaking, so we'll have to wait until Apollo Client 4.0\n    // to address this.\n    result = {\n      loading: false,\n      data: void 0 as unknown as TData,\n      error: void 0,\n      networkStatus: NetworkStatus.ready,\n    };\n  }\n\n  if (result.errors && result.errors.length) {\n    // Until a set naming convention for networkError and graphQLErrors is\n    // decided upon, we map errors (graphQLErrors) to the error options.\n    // TODO: Is it possible for both result.error and result.errors to be\n    // defined here?\n    result = {\n      ...result,\n      error: result.error || new ApolloError({ graphQLErrors: result.errors }),\n    };\n  }\n\n  const obsQueryFields = useMemo(() => ({\n    refetch: obsQuery.refetch.bind(obsQuery),\n    fetchMore: obsQuery.fetchMore.bind(obsQuery),\n    updateQuery: obsQuery.updateQuery.bind(obsQuery),\n    startPolling: obsQuery.startPolling.bind(obsQuery),\n    stopPolling: obsQuery.stopPolling.bind(obsQuery),\n    subscribeToMore: obsQuery.subscribeToMore.bind(obsQuery),\n  }), [obsQuery]);\n\n  return {\n    ...obsQueryFields,\n    variables: createWatchQueryOptions(query, options).variables,\n    client,\n    called: true,\n    previousData: ref.current.previousData,\n    ...result,\n  };\n}\n\n/**\n * A function to massage options before passing them the ObservableQuery.\n */\nfunction createWatchQueryOptions<TData, TVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: QueryHookOptions<TData, TVariables> = {},\n): WatchQueryOptions<TVariables, TData> {\n  // TODO: For some reason, we pass context, which is the React Apollo Context,\n  // into observable queries, and test for that.\n  // removing hook specific options\n  const {\n    skip,\n    ssr,\n    onCompleted,\n    onError,\n    displayName,\n    ...watchQueryOptions\n  } = options;\n\n  if (skip) {\n    watchQueryOptions.fetchPolicy = 'standby';\n  } else if (\n    watchQueryOptions.context?.renderPromises &&\n    (\n      watchQueryOptions.fetchPolicy === 'network-only' ||\n      watchQueryOptions.fetchPolicy === 'cache-and-network'\n    )\n  ) {\n    // this behavior was added to react-apollo without explanation in this PR\n    // https://github.com/apollographql/react-apollo/pull/1579\n    watchQueryOptions.fetchPolicy = 'cache-first';\n  } else if (!watchQueryOptions.fetchPolicy) {\n    // cache-first is the default policy, but we explicitly assign it here so\n    // the cache policies computed based on options can be cleared\n    watchQueryOptions.fetchPolicy = 'cache-first';\n  }\n\n  if (!watchQueryOptions.variables) {\n    watchQueryOptions.variables = {} as TVariables;\n  }\n\n  return { query, ...watchQueryOptions };\n}\n","import { useCallback, useEffect, useRef, useState } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport {\n  MutationFunctionOptions,\n  MutationHookOptions,\n  MutationResult,\n  MutationTuple,\n} from '../types/types';\n\nimport {\n  ApolloCache,\n  DefaultContext,\n  mergeOptions,\n  OperationVariables,\n} from '../../core';\nimport { equal } from '@wry/equality';\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport { ApolloError } from '../../errors';\nimport { useApolloClient } from './useApolloClient';\n\nexport function useMutation<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n>(\n  mutation: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: MutationHookOptions<TData, TVariables, TContext>,\n): MutationTuple<TData, TVariables, TContext, TCache> {\n  const client = useApolloClient(options?.client);\n  verifyDocumentType(mutation, DocumentType.Mutation);\n  const [result, setResult] = useState<Omit<MutationResult, 'reset'>>({\n    called: false,\n    loading: false,\n    client,\n  });\n\n  const ref = useRef({\n    result,\n    mutationId: 0,\n    isMounted: true,\n    client,\n    mutation,\n    options,\n  });\n\n  // TODO: Trying to assign these in a useEffect or useLayoutEffect breaks\n  // higher-order components.\n  {\n    Object.assign(ref.current, { client, options, mutation });\n  }\n\n  const execute = useCallback((\n    executeOptions: MutationFunctionOptions<\n      TData,\n      TVariables,\n      TContext,\n      TCache\n    > = {}\n  ) => {\n    const {client, options, mutation} = ref.current;\n    const baseOptions = { ...options, mutation };\n    if (!ref.current.result.loading && !baseOptions.ignoreResults) {\n      setResult(ref.current.result = {\n        loading: true,\n        error: void 0,\n        data: void 0,\n        called: true,\n        client,\n      });\n    }\n\n    const mutationId = ++ref.current.mutationId;\n    const clientOptions = mergeOptions(\n      baseOptions,\n      executeOptions as any,\n    );\n\n    return client.mutate(clientOptions).then((response) => {\n      const { data, errors } = response;\n      const error =\n        errors && errors.length > 0\n          ? new ApolloError({ graphQLErrors: errors })\n          : void 0;\n\n      if (\n        mutationId === ref.current.mutationId &&\n        !clientOptions.ignoreResults\n      ) {\n        const result = {\n          called: true,\n          loading: false,\n          data,\n          error,\n          client,\n        };\n\n        if (ref.current.isMounted && !equal(ref.current.result, result)) {\n          setResult(ref.current.result = result);\n        }\n      }\n\n      baseOptions.onCompleted?.(response.data!);\n      executeOptions.onCompleted?.(response.data!);\n      return response;\n    }).catch((error) => {\n      if (\n        mutationId === ref.current.mutationId &&\n        ref.current.isMounted\n      ) {\n        const result = {\n          loading: false,\n          error,\n          data: void 0,\n          called: true,\n          client,\n        };\n\n        if (!equal(ref.current.result, result)) {\n          setResult(ref.current.result = result);\n        }\n      }\n\n      if (baseOptions.onError || clientOptions.onError) {\n        baseOptions.onError?.(error);\n        executeOptions.onError?.(error);\n        // TODO(brian): why are we returning this here???\n        return { data: void 0, errors: error };\n      }\n\n      throw error;\n    });\n  }, []);\n\n  const reset = useCallback(() => {\n    setResult({ called: false, loading: false, client });\n  }, []);\n\n  useEffect(() => () => {\n    ref.current.isMounted = false;\n  }, []);\n\n  return [execute, { reset, ...result }];\n}\n","import styled from \"@emotion/styled\";\n\nexport const Container = styled.div``;\n\nexport const List = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  & .list-description {\n    margin: 8px 0;\n    width: 800px;\n  }\n\n  & .list-title {\n    display: inline-block;\n    min-width: 100px;\n  }\n\n  & .list-href {\n    margin-left: 30px;\n  }\n\n  & .button-group {\n    display: inline-block;\n    margin-left: 15px;\n  }\n\n  & .button {\n    border: none;\n    background-color: transparent;\n    cursor: pointer;\n\n    &:hover {\n      color: red;\n      transition: 0.2s linear;\n    }\n  }\n\n  & .edit-input {\n    display: block;\n    width: 400px;\n    margin: 8px 0;\n  }\n\n  & .delete-button {\n    margin-left: 5px;\n  }\n`;\n\nexport const Row = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  & .input-row {\n    margin: 5px 0;\n    max-width: 800px;\n  }\n`;\n","import React, { useCallback, useState } from \"react\";\nimport { Container } from \"../LinkManager/styles\";\nimport styled from \"@emotion/styled\";\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport {\n  CREATE_BOARD,\n  GET_BOARD_BY_CATEGORY,\n} from \"../../../queries/adminQuery\";\nimport {\n  createBoard,\n  createBoardVariables,\n  getBoardByCategory,\n  getBoardByCategoryVariables,\n} from \"../../../typings/api\";\nimport YouTube, { Options } from \"react-youtube\";\nimport useInput from \"../../../hooks/useInput\";\nimport { Input } from \"antd\";\nimport { toast } from \"react-toastify\";\n\nconst VideoLink: React.VFC = () => {\n  const [videoId, setVideoId] = useState<string>(\"\");\n  const [url, onChangeUrl, setUrl] = useInput(\"\");\n  const [inputOpen, setInputOpen] = useState<boolean>(false);\n  const { loading, refetch } = useQuery<\n    getBoardByCategory,\n    getBoardByCategoryVariables\n  >(GET_BOARD_BY_CATEGORY, {\n    variables: {\n      category: \"link\",\n    },\n    onCompleted: ({ getBoardByCategory }) => {\n      const { ok, err, data } = getBoardByCategory;\n      if (ok && data && data.length > 0) {\n        if (data[0].link) {\n          setVideoId(data[0].link.split(\"v=\")[1]);\n        }\n      } else {\n        console.log(err);\n      }\n    },\n  });\n\n  const [createBoardMutation] = useMutation<createBoard, createBoardVariables>(\n    CREATE_BOARD,\n    {\n      onCompleted: ({ createBoard }) => {\n        const { ok, err } = createBoard;\n        if (ok) {\n          toast.success(\"성공적으로 업로드 되었습니다\");\n          setUrl(\"\");\n          window.location.reload();\n        } else {\n          console.log(err);\n        }\n      },\n    }\n  );\n\n  const opts: Options = {\n    height: \"350\",\n    width: \"500\",\n    playerVars: {\n      autoplay: 1,\n    },\n  };\n\n  const handleSubmit = useCallback(async () => {\n    await createBoardMutation({\n      variables: {\n        title: \"video link\",\n        content: \"video-content\",\n        link: url,\n        category: \"link\",\n      },\n    }).then((res) => {\n      refetch();\n    });\n    setUrl(\"\");\n  }, [url, createBoardMutation, refetch, setUrl]);\n\n  const onReady = (e: any) => {\n    e.target.pauseVideo();\n  };\n\n  if (loading) {\n    return <div>loading...</div>;\n  }\n\n  return (\n    <Container>\n      <Content>\n        <div className=\"head\">\n          <span className=\"title\">현재 업로드된 영상</span>\n          <div className=\"head-button\" onClick={() => setInputOpen(!inputOpen)}>\n            링크 올리기\n          </div>\n        </div>\n        {inputOpen && (\n          <div className=\"input-content\">\n            <StyledInput value={url} onChange={onChangeUrl} />\n            <button onClick={handleSubmit}>올리기</button>\n          </div>\n        )}\n        {videoId !== \"\" ? (\n          <YouTube opts={opts} videoId={videoId} onReady={onReady} />\n        ) : (\n          <div className=\"notice\">현재 업로드 된 비디오가 없습니다</div>\n        )}\n      </Content>\n    </Container>\n  );\n};\n\nexport default VideoLink;\n\nconst Content = styled.div`\n  & .head {\n    display: flex;\n    align-items: center;\n\n    & .title {\n      font-size: 16px;\n      display: block;\n    }\n\n    & .head-button {\n      padding: 6px 8px;\n      background-color: skyblue;\n      color: white;\n      margin-left: 150px;\n      cursor: pointer;\n    }\n    margin-bottom: 30px;\n  }\n\n  & .input-content {\n    width: 100%;\n    height: 50px;\n    display: flex;\n    align-items: center;\n    padding: 10px 5px;\n\n    & button {\n      border: none;\n      background-color: skyblue;\n      color: white;\n      cursor: pointer;\n      padding: 4px 6px;\n      margin-left: 20px;\n    }\n  }\n\n  & .notice {\n    padding: 15px;\n  }\n`;\n\nconst StyledInput = styled(Input)`\n  width: 400px;\n`;\n"],"sourceRoot":""}