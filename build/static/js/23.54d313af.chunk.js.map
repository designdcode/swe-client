{"version":3,"sources":["queries/adminQuery.ts","../../../../src/react/data/QueryData.ts","../../../../../src/react/hooks/utils/useBaseQuery.ts","../../../../../src/react/hooks/utils/useDeepMemo.ts","../../../../../src/react/hooks/utils/useAfterFastRefresh.ts","hooks/useWindowSize.ts","../../../../src/react/hooks/useQuery.ts","pages/Detail/index.tsx"],"names":["CREATE_BOARD","gql","GET_BOARD_BY_CATEGORY","DELETE_BOARD","EDIT_BOARD","DELETE_FILE","DELETE_IMAGE","CREATE_FILE","CREATE_IMAGE","CREATE_LINK","DELETE_LINK","EDIT_LINK","options","context","onNewData","runLazy","previous","Object","create","runLazyQuery","cleanup","lazyOptions","obsRefetch","variables","currentObservable","refetch","obsFetchMore","fetchMoreOptions","fetchMore","obsUpdateQuery","mapFn","updateQuery","obsStartPolling","pollInterval","startPolling","obsStopPolling","stopPolling","obsSubscribeToMore","subscribeToMore","execute","this","refreshClient","getOptions","skip","query","removeQuerySubscription","removeObservable","updateObservableQuery","getExecuteSsrResult","getExecuteResult","executeLazy","loading","networkStatus","ready","called","data","undefined","fetchData","ssr","Promise","resolve","startQuerySubscription","afterExecute","lazy","isMounted","ssrInitiated","handleErrorOrCompleted","previousOptions","unmount","bind","result","renderPromises","ssrDisabled","fetchDisabled","client","disableNetworkFetches","ssrLoading","stale","observableQueryFields","addQueryPromise","prepareObservableQueryOptions","verifyDocumentType","Query","displayName","fetchPolicy","initializeObservableQuery","getSSRObservable","observableQueryOptions","children","watchQuery","registerSSRObservable","newObservableQueryOptions","setOptions","catch","currentSubscription","subscribe","next","previousResult","error","resubscribeToQuery","hasOwnProperty","last","resetLastResults","currentResult","getCurrentResult","partial","errors","length","graphQLErrors","assign","getLastResult","keys","previousData","resetQueryStoreErrors","onCompleted","onError","unsubscribe","andDelete","useBaseQuery","x","tick","forceUpdate","updatedOptions","queryDataRef","queryData","current","then","memoFn","key","ref","value","useDeepMemo","queryResult","__DEV__","effectFn","useAfterFastRefresh","useWindowSize","isClient","window","getSize","useCallback","width","innerWidth","height","useState","windowSize","setWindowSize","useEffect","handleResize","addEventListener","removeEventListener","useQuery","Detail","screen","useParams","param","subparam","category","Wrapper","Cover","CoverTitle","margin","NavigationData","map","item","idx","title","split","className","ko_title","description","SubMenu","isBigger","subMenu","elem","i","colored","ContentCell","first","FakeLine","StyleLink","to","src","alt","Content","ContentImage","getBoardByCategory","images","url","styled","div","mediaQueries","BREAKPOINT_PHONE_MEDIUM","BREAKPOINT_BIGGER_THAN_PC","props","Link"],"mappings":"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","file":"static/js/23.54d313af.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\n\nexport const CREATE_BOARD = gql`\n  mutation createBoard(\n    $title: String\n    $content: String\n    $category: String!\n    $files: [AttachModel]\n    $images: [AttachModel]\n    $link: String\n  ) {\n    createBoard(\n      title: $title\n      content: $content\n      category: $category\n      files: $files\n      images: $images\n      link: $link\n    ) {\n      ok\n      err\n    }\n  }\n`;\n\nexport const GET_BOARD_BY_CATEGORY = gql`\n  query getBoardByCategory($category: String!) {\n    getBoardByCategory(category: $category) {\n      ok\n      err\n      data {\n        id\n        title\n        content\n        category\n        files {\n          id\n          url\n          fileName\n        }\n        images {\n          id\n          url\n          fileName\n        }\n        link\n        createdAt\n        updatedAt\n        deleteAt\n      }\n    }\n  }\n`;\n\nexport const DELETE_BOARD = gql`\n  mutation deleteBoard($id: Int!) {\n    deleteBoard(id: $id) {\n      ok\n      err\n    }\n  }\n`;\n\nexport const EDIT_BOARD = gql`\n  mutation editBoard(\n    $id: Int!\n    $title: String\n    $content: String\n    $link: String\n  ) {\n    editBoard(id: $id, title: $title, content: $content, link: $link) {\n      ok\n      err\n    }\n  }\n`;\n\nexport const EDIT_FILE = gql`\n  mutation editFile($id: Int!, $url: String!, $fileName: String!) {\n    editFile(id: $id, url: $url, fileName: $fileName) {\n      ok\n      err\n    }\n  }\n`;\n\nexport const EDIT_IMAGE = gql`\n  mutation editImage($id: Int!, $url: String!, $fileName: String!) {\n    editImage(id: $id, url: $url, fileName: $fileName) {\n      ok\n      err\n    }\n  }\n`;\n\nexport const DELETE_FILE = gql`\n  mutation deleteFile($id: Int!) {\n    deleteFile(id: $id) {\n      ok\n      err\n    }\n  }\n`;\n\nexport const DELETE_IMAGE = gql`\n  mutation deleteImage($id: Int!) {\n    deleteImage(id: $id) {\n      ok\n      err\n    }\n  }\n`;\n\nexport const CREATE_FILE = gql`\n  mutation createFile($url: String!, $fileName: String!, $boardId: Int!) {\n    createFile(url: $url, fileName: $fileName, boardId: $boardId) {\n      ok\n      err\n    }\n  }\n`;\n\nexport const CREATE_IMAGE = gql`\n  mutation createImage($url: String!, $fileName: String!, $boardId: Int!) {\n    createImage(url: $url, fileName: $fileName, boardId: $boardId) {\n      ok\n      err\n    }\n  }\n`;\n\nexport const CREATE_LINK = gql`\n  mutation createLink($title: String!, $url: String!) {\n    createLink(title: $title, url: $url) {\n      ok\n      err\n    }\n  }\n`;\n\nexport const DELETE_LINK = gql`\n  mutation deleteLink($id: Int!) {\n    deleteLink(id: $id) {\n      ok\n      err\n    }\n  }\n`;\n\nexport const EDIT_LINK = gql`\n  mutation editLink($id: Int!, $title: String, $url: String) {\n    editLink(id: $id, title: $title, url: $url) {\n      ok\n      err\n    }\n  }\n`;\n","import { equal } from '@wry/equality';\n\nimport { ApolloError } from '../../errors';\n\nimport {\n  ApolloClient,\n  NetworkStatus,\n  FetchMoreQueryOptions,\n  SubscribeToMoreOptions,\n  ObservableQuery,\n  FetchMoreOptions,\n  UpdateQueryOptions,\n  DocumentNode,\n  TypedDocumentNode,\n} from '../../core';\n\nimport {\n  ObservableSubscription\n} from '../../utilities';\n\nimport { DocumentType } from '../parser';\nimport {\n  QueryResult,\n  QueryDataOptions,\n  QueryTuple,\n  QueryLazyOptions,\n  ObservableQueryFields,\n} from '../types/types';\nimport { OperationData } from './OperationData';\n\ntype ObservableQueryOptions<TData, TVars> =\n  ReturnType<QueryData<TData, TVars>[\"prepareObservableQueryOptions\"]>;\n\nexport class QueryData<TData, TVariables> extends OperationData<\n  QueryDataOptions<TData, TVariables>\n> {\n  public onNewData: () => void;\n  public currentObservable?: ObservableQuery<TData, TVariables>;\n  private currentSubscription?: ObservableSubscription;\n  private runLazy: boolean = false;\n  private lazyOptions?: QueryLazyOptions<TVariables>;\n  private previous: {\n    client?: ApolloClient<object>;\n    query?: DocumentNode | TypedDocumentNode<TData, TVariables>;\n    observableQueryOptions?: ObservableQueryOptions<TData, TVariables>;\n    result?: QueryResult<TData, TVariables>;\n    loading?: boolean;\n    options?: QueryDataOptions<TData, TVariables>;\n    error?: ApolloError;\n  } = Object.create(null);\n\n  constructor({\n    options,\n    context,\n    onNewData\n  }: {\n    options: QueryDataOptions<TData, TVariables>;\n    context: any;\n    onNewData: () => void;\n  }) {\n    super(options, context);\n    this.onNewData = onNewData;\n  }\n\n  public execute(): QueryResult<TData, TVariables> {\n    this.refreshClient();\n\n    const { skip, query } = this.getOptions();\n    if (skip || query !== this.previous.query) {\n      this.removeQuerySubscription();\n      this.removeObservable(!skip);\n      this.previous.query = query;\n    }\n\n    this.updateObservableQuery();\n\n    return this.getExecuteSsrResult() || this.getExecuteResult();\n  }\n\n  public executeLazy(): QueryTuple<TData, TVariables> {\n    return !this.runLazy\n      ? [\n          this.runLazyQuery,\n          {\n            loading: false,\n            networkStatus: NetworkStatus.ready,\n            called: false,\n            data: undefined\n          }\n        ]\n      : [this.runLazyQuery, this.execute()];\n  }\n\n  // For server-side rendering\n  public fetchData(): Promise<void> | boolean {\n    const options = this.getOptions();\n    if (options.skip || options.ssr === false) return false;\n    return new Promise(resolve => this.startQuerySubscription(resolve));\n  }\n\n  public afterExecute({ lazy = false }: { lazy?: boolean } = {}) {\n    this.isMounted = true;\n    const options = this.getOptions();\n    if (this.currentObservable && !this.ssrInitiated()) {\n      this.startQuerySubscription();\n    }\n\n    if (!lazy || this.runLazy) {\n      this.handleErrorOrCompleted();\n    }\n\n    this.previousOptions = options;\n    return this.unmount.bind(this);\n  }\n\n  public cleanup() {\n    this.removeQuerySubscription();\n    this.removeObservable(true);\n    delete this.previous.result;\n  }\n\n  public getOptions() {\n    const options = super.getOptions();\n\n    if (this.lazyOptions) {\n      options.variables = {\n        ...options.variables,\n        ...this.lazyOptions.variables\n      } as TVariables;\n      options.context = {\n        ...options.context,\n        ...this.lazyOptions.context\n      };\n    }\n\n    // skip is not supported when using lazy query execution.\n    if (this.runLazy) {\n      delete options.skip;\n    }\n\n    return options;\n  }\n\n  public ssrInitiated() {\n    return this.context && this.context.renderPromises;\n  }\n\n  private runLazyQuery = (options?: QueryLazyOptions<TVariables>) => {\n    this.cleanup();\n    this.runLazy = true;\n    this.lazyOptions = options;\n    this.onNewData();\n  };\n\n  private getExecuteSsrResult() {\n    const { ssr, skip } = this.getOptions();\n    const ssrDisabled = ssr === false;\n    const fetchDisabled = this.refreshClient().client.disableNetworkFetches;\n\n    const ssrLoading = {\n      loading: true,\n      networkStatus: NetworkStatus.loading,\n      called: true,\n      data: undefined,\n      stale: false,\n      client: this.client,\n      ...this.observableQueryFields(),\n    } as QueryResult<TData, TVariables>;\n\n    // If SSR has been explicitly disabled, and this function has been called\n    // on the server side, return the default loading state.\n    if (ssrDisabled && (this.ssrInitiated() || fetchDisabled)) {\n      this.previous.result = ssrLoading;\n      return ssrLoading;\n    }\n\n    if (this.ssrInitiated()) {\n      const result = this.getExecuteResult() || ssrLoading;\n      if (result.loading && !skip) {\n        this.context.renderPromises!.addQueryPromise(this, () => null);\n      }\n      return result;\n    }\n  }\n\n  private prepareObservableQueryOptions() {\n    const options = this.getOptions();\n    this.verifyDocumentType(options.query, DocumentType.Query);\n    const displayName = options.displayName || 'Query';\n\n    // Set the fetchPolicy to cache-first for network-only and cache-and-network\n    // fetches for server side renders.\n    if (\n      this.ssrInitiated() &&\n      (options.fetchPolicy === 'network-only' ||\n        options.fetchPolicy === 'cache-and-network')\n    ) {\n      options.fetchPolicy = 'cache-first';\n    }\n\n    return {\n      ...options,\n      displayName,\n      context: options.context,\n    };\n  }\n\n  private initializeObservableQuery() {\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    if (this.ssrInitiated()) {\n      this.currentObservable = this.context!.renderPromises!.getSSRObservable(\n        this.getOptions()\n      );\n    }\n\n    if (!this.currentObservable) {\n      const observableQueryOptions = this.prepareObservableQueryOptions();\n\n      this.previous.observableQueryOptions = {\n        ...observableQueryOptions,\n        children: void 0,\n      };\n      this.currentObservable = this.refreshClient().client.watchQuery({\n        ...observableQueryOptions\n      });\n\n      if (this.ssrInitiated()) {\n        this.context!.renderPromises!.registerSSRObservable(\n          this.currentObservable,\n          observableQueryOptions\n        );\n      }\n    }\n  }\n\n  private updateObservableQuery() {\n    // If we skipped initially, we may not have yet created the observable\n    if (!this.currentObservable) {\n      this.initializeObservableQuery();\n      return;\n    }\n\n    const newObservableQueryOptions = {\n      ...this.prepareObservableQueryOptions(),\n      children: void 0,\n    };\n\n    if (this.getOptions().skip) {\n      this.previous.observableQueryOptions = newObservableQueryOptions;\n      return;\n    }\n\n    if (\n      !equal(newObservableQueryOptions, this.previous.observableQueryOptions)\n    ) {\n      this.previous.observableQueryOptions = newObservableQueryOptions;\n      this.currentObservable\n        .setOptions(newObservableQueryOptions)\n        // The error will be passed to the child container, so we don't\n        // need to log it here. We could conceivably log something if\n        // an option was set. OTOH we don't log errors w/ the original\n        // query. See https://github.com/apollostack/react-apollo/issues/404\n        .catch(() => {});\n    }\n  }\n\n  // Setup a subscription to watch for Apollo Client `ObservableQuery` changes.\n  // When new data is received, and it doesn't match the data that was used\n  // during the last `QueryData.execute` call (and ultimately the last query\n  // component render), trigger the `onNewData` callback. If not specified,\n  // `onNewData` will fallback to the default `QueryData.onNewData` function\n  // (which usually leads to a query component re-render).\n  private startQuerySubscription(onNewData: () => void = this.onNewData) {\n    if (this.currentSubscription || this.getOptions().skip) return;\n\n    this.currentSubscription = this.currentObservable!.subscribe({\n      next: ({ loading, networkStatus, data }) => {\n        const previousResult = this.previous.result;\n\n        // Make sure we're not attempting to re-render similar results\n        if (\n          previousResult &&\n          previousResult.loading === loading &&\n          previousResult.networkStatus === networkStatus &&\n          equal(previousResult.data, data)\n        ) {\n          return;\n        }\n\n        onNewData();\n      },\n      error: error => {\n        this.resubscribeToQuery();\n        if (!error.hasOwnProperty('graphQLErrors')) throw error;\n\n        const previousResult = this.previous.result;\n        if (\n          (previousResult && previousResult.loading) ||\n          !equal(error, this.previous.error)\n        ) {\n          this.previous.error = error;\n          onNewData();\n        }\n      }\n    });\n  }\n\n  private resubscribeToQuery() {\n    this.removeQuerySubscription();\n\n    // Unfortunately, if `lastError` is set in the current\n    // `observableQuery` when the subscription is re-created,\n    // the subscription will immediately receive the error, which will\n    // cause it to terminate again. To avoid this, we first clear\n    // the last error/result from the `observableQuery` before re-starting\n    // the subscription, and restore it afterwards (so the subscription\n    // has a chance to stay open).\n    const { currentObservable } = this;\n    if (currentObservable) {\n      const last = currentObservable[\"last\"];\n      try {\n        currentObservable.resetLastResults();\n        this.startQuerySubscription();\n      } finally {\n        currentObservable[\"last\"] = last;\n      }\n    }\n  }\n\n  private getExecuteResult(): QueryResult<TData, TVariables> {\n    let result = this.observableQueryFields() as QueryResult<TData, TVariables>;\n    const options = this.getOptions();\n\n    // When skipping a query (ie. we're not querying for data but still want\n    // to render children), make sure the `data` is cleared out and\n    // `loading` is set to `false` (since we aren't loading anything).\n    //\n    // NOTE: We no longer think this is the correct behavior. Skipping should\n    // not automatically set `data` to `undefined`, but instead leave the\n    // previous data in place. In other words, skipping should not mandate\n    // that previously received data is all of a sudden removed. Unfortunately,\n    // changing this is breaking, so we'll have to wait until Apollo Client\n    // 4.0 to address this.\n    if (options.skip) {\n      result = {\n        ...result,\n        data: undefined,\n        error: undefined,\n        loading: false,\n        networkStatus: NetworkStatus.ready,\n        called: true,\n      };\n    } else if (this.currentObservable) {\n      // Fetch the current result (if any) from the store.\n      const currentResult = this.currentObservable.getCurrentResult();\n      const { data, loading, partial, networkStatus, errors } = currentResult;\n      let { error } = currentResult;\n\n      // Until a set naming convention for networkError and graphQLErrors is\n      // decided upon, we map errors (graphQLErrors) to the error options.\n      if (errors && errors.length > 0) {\n        error = new ApolloError({ graphQLErrors: errors });\n      }\n\n      result = {\n        ...result,\n        data,\n        loading,\n        networkStatus,\n        error,\n        called: true\n      };\n\n      if (loading) {\n        // Fall through without modifying result...\n      } else if (error) {\n        Object.assign(result, {\n          data: (this.currentObservable.getLastResult() || ({} as any))\n            .data\n        });\n      } else {\n        const { fetchPolicy } = this.currentObservable.options;\n        const { partialRefetch } = options;\n        if (\n          partialRefetch &&\n          partial &&\n          (!data || Object.keys(data).length === 0) &&\n          fetchPolicy !== 'cache-only'\n        ) {\n          // When a `Query` component is mounted, and a mutation is executed\n          // that returns the same ID as the mounted `Query`, but has less\n          // fields in its result, Apollo Client's `QueryManager` returns the\n          // data as `undefined` since a hit can't be found in the cache.\n          // This can lead to application errors when the UI elements rendered by\n          // the original `Query` component are expecting certain data values to\n          // exist, and they're all of a sudden stripped away. To help avoid\n          // this we'll attempt to refetch the `Query` data.\n          Object.assign(result, {\n            loading: true,\n            networkStatus: NetworkStatus.loading\n          });\n          result.refetch();\n          return result;\n        }\n      }\n    }\n\n    result.client = this.client;\n    // Store options as this.previousOptions.\n    this.setOptions(options, true);\n\n    const previousResult = this.previous.result;\n\n    this.previous.loading =\n      previousResult && previousResult.loading || false;\n\n    // Ensure the returned result contains previousData as a separate\n    // property, to give developers the flexibility of leveraging outdated\n    // data while new data is loading from the network. Falling back to\n    // previousResult.previousData when previousResult.data is falsy here\n    // allows result.previousData to persist across multiple results.\n    result.previousData = previousResult &&\n      (previousResult.data || previousResult.previousData);\n\n    this.previous.result = result;\n\n    // Any query errors that exist are now available in `result`, so we'll\n    // remove the original errors from the `ObservableQuery` query store to\n    // make sure they aren't re-displayed on subsequent (potentially error\n    // free) requests/responses.\n    this.currentObservable && this.currentObservable.resetQueryStoreErrors();\n\n    return result;\n  }\n\n  private handleErrorOrCompleted() {\n    if (!this.currentObservable || !this.previous.result) return;\n\n    const { data, loading, error } = this.previous.result;\n\n    if (!loading) {\n      const {\n        query,\n        variables,\n        onCompleted,\n        onError,\n        skip\n      } = this.getOptions();\n\n      // No changes, so we won't call onError/onCompleted.\n      if (\n        this.previousOptions &&\n        !this.previous.loading &&\n        equal(this.previousOptions.query, query) &&\n        equal(this.previousOptions.variables, variables)\n      ) {\n        return;\n      }\n\n      if (onCompleted && !error && !skip) {\n        onCompleted(data as TData);\n      } else if (onError && error) {\n        onError(error);\n      }\n    }\n  }\n\n  private removeQuerySubscription() {\n    if (this.currentSubscription) {\n      this.currentSubscription.unsubscribe();\n      delete this.currentSubscription;\n    }\n  }\n\n  private removeObservable(andDelete: boolean) {\n    if (this.currentObservable) {\n      this.currentObservable[\"tearDownQuery\"]();\n      if (andDelete) {\n        delete this.currentObservable;\n      }\n    }\n  }\n\n  private obsRefetch = (variables?: Partial<TVariables>) =>\n    this.currentObservable?.refetch(variables);\n\n  private obsFetchMore = (\n    fetchMoreOptions: FetchMoreQueryOptions<TVariables, TData> &\n      FetchMoreOptions<TData, TVariables>\n  ) => this.currentObservable?.fetchMore(fetchMoreOptions);\n\n  private obsUpdateQuery = <TVars = TVariables>(\n    mapFn: (\n      previousQueryResult: TData,\n      options: UpdateQueryOptions<TVars>\n    ) => TData\n  ) => this.currentObservable?.updateQuery(mapFn);\n\n  private obsStartPolling = (pollInterval: number) => {\n    this.currentObservable?.startPolling(pollInterval);\n  };\n\n  private obsStopPolling = () => {\n    this.currentObservable?.stopPolling();\n  };\n\n  private obsSubscribeToMore = <\n    TSubscriptionData = TData,\n    TSubscriptionVariables = TVariables\n  >(\n    options: SubscribeToMoreOptions<\n      TData,\n      TSubscriptionVariables,\n      TSubscriptionData\n    >\n  ) => this.currentObservable?.subscribeToMore(options);\n\n  private observableQueryFields() {\n    return {\n      variables: this.currentObservable?.variables,\n      refetch: this.obsRefetch,\n      fetchMore: this.obsFetchMore,\n      updateQuery: this.obsUpdateQuery,\n      startPolling: this.obsStartPolling,\n      stopPolling: this.obsStopPolling,\n      subscribeToMore: this.obsSubscribeToMore\n    } as ObservableQueryFields<TData, TVariables>;\n  }\n}\n","import '../../../utilities/globals';\n\nimport { useContext, useEffect, useReducer, useRef } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\n\nimport {\n  QueryHookOptions,\n  QueryDataOptions,\n  QueryTuple,\n  QueryResult,\n} from '../../types/types';\nimport { QueryData } from '../../data';\nimport { useDeepMemo } from './useDeepMemo';\nimport { OperationVariables } from '../../../core';\nimport { getApolloContext } from '../../context';\nimport { useAfterFastRefresh } from './useAfterFastRefresh';\n\nexport function useBaseQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: QueryHookOptions<TData, TVariables>,\n  lazy = false\n) {\n  const context = useContext(getApolloContext());\n  const [tick, forceUpdate] = useReducer(x => x + 1, 0);\n  const updatedOptions = options ? { ...options, query } : { query };\n\n  const queryDataRef = useRef<QueryData<TData, TVariables>>();\n  const queryData = queryDataRef.current || (\n    queryDataRef.current = new QueryData<TData, TVariables>({\n      options: updatedOptions as QueryDataOptions<TData, TVariables>,\n      context,\n      onNewData() {\n        if (!queryData.ssrInitiated()) {\n          // When new data is received from the `QueryData` object, we want to\n          // force a re-render to make sure the new data is displayed. We can't\n          // force that re-render if we're already rendering however so to be\n          // safe we'll trigger the re-render in a microtask. In case the\n          // component gets unmounted before this callback fires, we re-check\n          // queryDataRef.current.isMounted before calling forceUpdate().\n          Promise.resolve().then(() => queryDataRef.current && queryDataRef.current.isMounted && forceUpdate());\n        } else {\n          // If we're rendering on the server side we can force an update at\n          // any point.\n          forceUpdate();\n        }\n      }\n    })\n  );\n\n  queryData.setOptions(updatedOptions);\n  queryData.context = context;\n\n  // `onError` and `onCompleted` callback functions will not always have a\n  // stable identity, so we'll exclude them from the memoization key to\n  // prevent `afterExecute` from being triggered un-necessarily.\n  const memo = {\n    options: {\n      ...updatedOptions,\n      onError: void 0,\n      onCompleted: void 0\n    } as QueryHookOptions<TData, TVariables>,\n    context,\n    tick\n  };\n\n  const result = useDeepMemo(\n    () => (lazy ? queryData.executeLazy() : queryData.execute()),\n    memo\n  );\n\n  const queryResult = lazy\n    ? (result as QueryTuple<TData, TVariables>)[1]\n    : (result as QueryResult<TData, TVariables>);\n\n  if (__DEV__) {\n    // ensure we run an update after refreshing so that we reinitialize\n    useAfterFastRefresh(forceUpdate);\n  }\n\n  useEffect(() => {\n    return () => {\n      queryData.cleanup();\n      // this effect can run multiple times during a fast-refresh\n      // so make sure we clean up the ref\n      queryDataRef.current = void 0;\n    }\n  }, []);\n\n  useEffect(() => queryData.afterExecute({ lazy }), [\n    queryResult.loading,\n    queryResult.networkStatus,\n    queryResult.error,\n    queryResult.data,\n    queryData.currentObservable,\n  ]);\n\n  return result;\n}\n","import { useRef } from 'react';\nimport { equal } from '@wry/equality';\n\n/**\n * Memoize a result using deep equality. This hook has two advantages over\n * React.useMemo: it uses deep equality to compare memo keys, and it guarantees\n * that the memo function will only be called if the keys are unequal.\n * React.useMemo cannot be relied on to do this, since it is only a performance\n * optimization (see https://reactjs.org/docs/hooks-reference.html#usememo).\n */\nexport function useDeepMemo<TKey, TValue>(\n  memoFn: () => TValue,\n  key: TKey\n): TValue {\n  const ref = useRef<{ key: TKey; value: TValue }>();\n\n  if (!ref.current || !equal(key, ref.current.key)) {\n    ref.current = { key, value: memoFn() };\n  }\n\n  return ref.current.value;\n}\n","import '../../../utilities/globals';\nimport { useEffect, useRef } from \"react\";\n\n/**\n * This hook allows running a function only immediately after a react\n * fast refresh or live reload.\n *\n * Useful in order to ensure that we can reinitialize things that have been\n * disposed by cleanup functions in `useEffect`.\n * @param effectFn a function to run immediately after a fast refresh\n */\nexport function useAfterFastRefresh(effectFn: () => unknown) {\n  if (__DEV__) {\n    const didRefresh = useRef(false);\n    useEffect(() => {\n      return () => {\n        // Detect fast refresh, only runs multiple times in fast refresh\n        didRefresh.current = true;\n      };\n    }, []);\n\n    useEffect(() => {\n      if (didRefresh.current === true) {\n        // This block only runs after a fast refresh\n        didRefresh.current = false;\n        effectFn();\n      }\n    }, [])\n  }\n}\n","import { useCallback, useEffect, useState } from \"react\";\n\nexport const useWindowSize = () => {\n  const isClient = typeof window === \"object\";\n\n  const getSize = useCallback(() => {\n    return {\n      width: isClient ? window.innerWidth : 0,\n      height: isClient ? window.innerWidth : 0,\n    };\n  }, [isClient]);\n\n  const [windowSize, setWindowSize] = useState(getSize);\n\n  useEffect(() => {\n    if (!isClient) {\n      return;\n    }\n    const handleResize = () => {\n      setWindowSize(getSize());\n    };\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, [getSize, isClient]);\n\n  return windowSize;\n};\n","import { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\n\nimport { QueryHookOptions, QueryResult } from '../types/types';\nimport { useBaseQuery } from './utils/useBaseQuery';\nimport { OperationVariables } from '../../core';\n\nexport function useQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: QueryHookOptions<TData, TVariables>\n) {\n  return useBaseQuery<TData, TVariables>(query, options, false) as QueryResult<\n    TData,\n    TVariables\n  >;\n}\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { useParams } from \"react-router\";\nimport { NavigationData } from \"../../assets/NavigationData\";\nimport {\n  BREAKPOINT_BIGGER_THAN_PC,\n  BREAKPOINT_PHONE_MEDIUM,\n  mediaQueries,\n} from \"../../utils/mediaQuery\";\nimport { useWindowSize } from \"../../hooks/useWindowSize\";\nimport { Link } from \"react-router-dom\";\nimport { useQuery } from \"@apollo/client\";\nimport { getBoardByCategory } from \"../../typings/api\";\nimport { GET_BOARD_BY_CATEGORY } from \"../../queries/adminQuery\";\n\ninterface ParamProps {\n  param: string;\n  subparam: string;\n}\n\ninterface middleMenuProps {\n  isBigger: boolean;\n}\n\ninterface MenuCellProps {\n  first: number;\n}\n\nconst Detail = () => {\n  const screen = useWindowSize();\n  const { param, subparam } = useParams<ParamProps>();\n  const { loading, data } = useQuery<getBoardByCategory>(\n    GET_BOARD_BY_CATEGORY,\n    {\n      variables: {\n        category: subparam,\n      },\n    }\n  );\n\n  if (loading) {\n    return <div>loading...</div>;\n  }\n  return (\n    <Wrapper>\n      <Cover>\n        <CoverTitle margin={screen.width > 1500 ? \"25%\" : \"15%\"}>\n          {NavigationData.map((item, idx) => {\n            if (item.title === param.split(\"-\")[0]) {\n              return (\n                <div key={item.key}>\n                  <span className=\"cover-main-title\">{item.ko_title}</span>\n                  <span className=\"cover-description\">{item.description}</span>\n                </div>\n              );\n            } else {\n              return null;\n            }\n          })}\n        </CoverTitle>\n        <SubMenu\n          isBigger={param === \"major\" || param === \"basic\" ? true : false}\n        >\n          <div className=\"submenu-content\">\n            {NavigationData.map((item, idx) => {\n              if (item.title === param) {\n                return item.subMenu.map((elem, i) => {\n                  const colored = elem.key === subparam ? 0 : 1;\n                  return (\n                    <ContentCell\n                      className=\"submenu-col\"\n                      first={colored}\n                      key={`${i}key`}\n                    >\n                      <FakeLine first={colored} />\n                      <StyleLink\n                        to={`/main/detail/${param}/${elem.key}`}\n                        first={colored}\n                      >\n                        {elem.ko_title}\n                      </StyleLink>\n                    </ContentCell>\n                  );\n                });\n              } else {\n                return null;\n              }\n            })}\n          </div>\n        </SubMenu>\n        <img src=\"/img/detailBG.jpeg\" alt=\"cover\" />\n      </Cover>\n\n      <Content>\n        <ContentImage>\n          {data?.getBoardByCategory.data &&\n            data.getBoardByCategory.data[0] &&\n            data.getBoardByCategory.data[0].images && (\n              <img\n                src={data.getBoardByCategory.data[0].images[0]?.url}\n                alt=\"uploadedImage\"\n              />\n            )}\n        </ContentImage>\n      </Content>\n    </Wrapper>\n  );\n};\n\nexport default Detail;\n\ninterface CoverTitleMarginProps {\n  margin: string;\n}\n\nconst Wrapper = styled.div`\n  ${mediaQueries(BREAKPOINT_PHONE_MEDIUM)} {\n    min-height: 50vh;\n  }\n  ${mediaQueries(BREAKPOINT_BIGGER_THAN_PC)} {\n    margin-top: 15px;\n    width: 100%;\n    min-width: 1280px;\n    max-width: 1920px;\n    min-height: 100%;\n  }\n`;\n\nconst Cover = styled.div`\n  ${mediaQueries(BREAKPOINT_PHONE_MEDIUM)} {\n    width: 100%;\n    height: 120px;\n    & img {\n      height: 100%;\n      width: 100%;\n      object-fit: cover;\n      object-position: center;\n    }\n  }\n  ${mediaQueries(BREAKPOINT_BIGGER_THAN_PC)} {\n    width: 100%;\n    height: 350px;\n    margin: 0 auto;\n    position: relative;\n    & img {\n      height: 100%;\n      width: 100%;\n      object-fit: cover;\n      object-position: center;\n    }\n  }\n`;\n\nconst CoverTitle = styled.div<CoverTitleMarginProps>`\n  ${mediaQueries(BREAKPOINT_PHONE_MEDIUM)} {\n    position: absolute;\n    top: 10%;\n    left: 5%;\n    & .cover-main-title {\n      font-size: 20px;\n      font-weight: 500px;\n      color: white;\n      display: block;\n    }\n    & .cover-description {\n      display: block;\n      font-size: 10px;\n      letter-spacing: 0.43px;\n      color: #ffffff;\n    }\n  }\n  ${mediaQueries(BREAKPOINT_BIGGER_THAN_PC)} {\n    position: absolute;\n    font-size: 20px;\n    margin-left: ${(props) => props.margin};\n    margin-top: 50px;\n    & .cover-main-title {\n      font-size: 40px;\n      font-weight: 500;\n      letter-spacing: 0.43px;\n      color: #ffffff;\n      text-shadow: 3px 3px 3px #000000e3;\n      display: block;\n    }\n\n    & .cover-description {\n      display: block;\n      font-size: 20px;\n      letter-spacing: 0.43px;\n      color: #ffffff;\n      text-shadow: 3px 3px 3px #000000e3;\n    }\n  }\n`;\n\nconst SubMenu = styled.div<middleMenuProps>`\n  ${mediaQueries(BREAKPOINT_PHONE_MEDIUM)} {\n    display: none;\n  }\n  ${mediaQueries(BREAKPOINT_BIGGER_THAN_PC)} {\n    width: 100%;\n    background-color: #e5e2e2b8;\n    position: absolute;\n    bottom: 0;\n    font-size: 15px;\n    & .submenu-content {\n      width: 1280px;\n      min-height: 50px;\n      height: ${(props) => (props.isBigger ? \"100px\" : \"50px\")};\n      margin: 0 auto;\n      display: flex;\n      align-items: center;\n      flex-wrap: wrap;\n      padding-left: 160px;\n    }\n    & .submenu-col {\n      width: 170px;\n      height: 50px;\n      display: flex;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n  }\n`;\n\nconst StyleLink = styled(Link)<MenuCellProps>`\n  ${mediaQueries(BREAKPOINT_PHONE_MEDIUM)} {\n  }\n\n  ${mediaQueries(BREAKPOINT_BIGGER_THAN_PC)} {\n    width: 100%;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding: 2px 5px;\n\n    color: ${(props) => (props.first === 0 ? \"white\" : \"black\")};\n    &:hover {\n      color: white;\n    }\n  }\n`;\n\nconst ContentCell = styled.div<MenuCellProps>`\n  ${mediaQueries(BREAKPOINT_PHONE_MEDIUM)} {\n  }\n\n  ${mediaQueries(BREAKPOINT_BIGGER_THAN_PC)} {\n    background-color: ${(props) => (props.first === 0 ? \"#0c1b58\" : \"\")};\n    color: ${(props) => (props.first === 0 ? \"white\" : \"black\")};\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    &:hover {\n      background-color: #0c1b58;\n      transition: 0.2s linear;\n      color: white;\n    }\n  }\n`;\n\nconst FakeLine = styled.div<MenuCellProps>`\n  ${mediaQueries(BREAKPOINT_PHONE_MEDIUM)} {\n  }\n\n  ${mediaQueries(BREAKPOINT_BIGGER_THAN_PC)} {\n    width: 50%;\n    height: 2px;\n    border-top: ${(props) => (props.first === 0 ? \"2px solid white\" : \"\")};\n  }\n`;\n\nconst Content = styled.div`\n  ${mediaQueries(BREAKPOINT_PHONE_MEDIUM)} {\n    height: 100%;\n  }\n  ${mediaQueries(BREAKPOINT_BIGGER_THAN_PC)} {\n    width: 1280px;\n    min-height: 100vh;\n    margin: 0 auto;\n  }\n`;\n\nconst ContentImage = styled.div`\n  ${mediaQueries(BREAKPOINT_PHONE_MEDIUM)} {\n    width: 100%;\n    & img {\n      width: 100%;\n      object-fit: contain;\n    }\n  }\n  ${mediaQueries(BREAKPOINT_BIGGER_THAN_PC)} {\n    padding: 60px 0;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    & img {\n      width: 80%;\n      margin: 0 auto;\n    }\n  }\n`;\n"],"sourceRoot":""}