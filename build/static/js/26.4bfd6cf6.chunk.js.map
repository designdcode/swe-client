{"version":3,"sources":["../../../../src/react/hooks/useApolloClient.ts","../../../../src/react/parser/index.ts","queries/sharedQuery.ts","../node_modules/antd/es/row/index.js","../node_modules/antd/es/col/index.js","pages/Admin/Dashboard/styles.tsx","../node_modules/antd/es/divider/index.js","utils/convertDate.ts","pages/Admin/Dashboard/index.tsx"],"names":["useApolloClient","override","context","client","DocumentType","cache","Map","operationName","type","name","Query","Mutation","Subscription","document","variables","cached","get","fragments","definitions","filter","x","kind","queries","operation","mutations","subscriptions","length","definition","GET_BOARD_BY_ID","gql","GET_LINK","GET_BOARD","USER_LOGIN","GET_BOARD_BY_MONTH","GET_POPUP_STATUS","GET_VIDEO_LINK","Row","Col","Container","styled","div","antCol","TableRowSpan","span","__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","propertyIsEnumerable","Divider","props","React","ConfigConsumer","_ref","_classNames","getPrefixCls","direction","customizePrefixCls","prefixCls","_props$type","_props$orientation","orientation","className","children","dashed","plain","restProps","orientationPrefix","concat","hasChildren","classString","classNames","_defineProperty","_extends","role","getDate","time","itemDate","Date","Math","floor","parseInt","getFullYear","getMonth","Dashboard","useQuery","data","loading","refetch","error","linkRefetch","linkError","state","useLocation","useState","notice","setNotice","admission","setAdmission","useEffect","getBoard","item","category","includes","slice","excuteRefetch","refresh","console","gutter","justify","title","Title","level","dataSource","showHeader","rowKey","pagination","size","dataIndex","align","ellipsis","render","value","record","to","id","idx"],"mappings":"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","file":"static/js/26.4bfd6cf6.chunk.js","sourcesContent":["import { invariant } from '../../utilities/globals';\nimport { useContext } from 'react';\nimport { ApolloClient } from '../../core';\nimport { getApolloContext } from '../context';\n\nexport function useApolloClient(\n  override?: ApolloClient<object>,\n): ApolloClient<object> {\n  const context = useContext(getApolloContext());\n  const client = override || context.client;\n  invariant(\n    !!client,\n    'Could not find \"client\" in the context or passed in as an option. ' +\n    'Wrap the root component in an <ApolloProvider>, or pass an ApolloClient' +\n    'ApolloClient instance in via options.',\n  );\n\n  return client;\n}\n","import { invariant } from '../../utilities/globals';\n\nimport {\n  DocumentNode,\n  DefinitionNode,\n  VariableDefinitionNode,\n  OperationDefinitionNode\n} from 'graphql';\n\nexport enum DocumentType {\n  Query,\n  Mutation,\n  Subscription\n}\n\nexport interface IDocumentDefinition {\n  type: DocumentType;\n  name: string;\n  variables: ReadonlyArray<VariableDefinitionNode>;\n}\n\nconst cache = new Map();\n\nexport function operationName(type: DocumentType) {\n  let name;\n  switch (type) {\n    case DocumentType.Query:\n      name = 'Query';\n      break;\n    case DocumentType.Mutation:\n      name = 'Mutation';\n      break;\n    case DocumentType.Subscription:\n      name = 'Subscription';\n      break;\n  }\n  return name;\n}\n\n// This parser is mostly used to safety check incoming documents.\nexport function parser(document: DocumentNode): IDocumentDefinition {\n  const cached = cache.get(document);\n  if (cached) return cached;\n\n  let variables, type, name;\n\n  invariant(\n    !!document && !!document.kind,\n    `Argument of ${document} passed to parser was not a valid GraphQL ` +\n      `DocumentNode. You may need to use 'graphql-tag' or another method ` +\n      `to convert your operation into a document`\n  );\n\n  const fragments = document.definitions.filter(\n    (x: DefinitionNode) => x.kind === 'FragmentDefinition'\n  );\n\n  const queries = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'query'\n  );\n\n  const mutations = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'mutation'\n  );\n\n  const subscriptions = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'subscription'\n  );\n\n  invariant(\n    !fragments.length ||\n      (queries.length || mutations.length || subscriptions.length),\n    `Passing only a fragment to 'graphql' is not yet supported. ` +\n      `You must include a query, subscription or mutation as well`\n  );\n\n  invariant(\n    queries.length + mutations.length + subscriptions.length <= 1,\n    `react-apollo only supports a query, subscription, or a mutation per HOC. ` +\n      `${document} had ${queries.length} queries, ${subscriptions.length} ` +\n      `subscriptions and ${mutations.length} mutations. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n\n  const definitions = queries.length\n    ? queries\n    : mutations.length\n    ? mutations\n    : subscriptions;\n\n  invariant(\n    definitions.length === 1,\n    `react-apollo only supports one definition per HOC. ${document} had ` +\n      `${definitions.length} definitions. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  const definition = definitions[0] as OperationDefinitionNode;\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === 'Name') {\n    name = definition.name.value;\n  } else {\n    name = 'data'; // fallback to using data if no name\n  }\n\n  const payload = { name, type, variables };\n  cache.set(document, payload);\n  return payload;\n}\n\nexport function verifyDocumentType(document: DocumentNode, type: DocumentType) {\n  const operation = parser(document);\n  const requiredOperationName = operationName(type);\n  const usedOperationName = operationName(operation.type);\n  invariant(\n    operation.type === type,\n    `Running a ${requiredOperationName} requires a graphql ` +\n      `${requiredOperationName}, but a ${usedOperationName} was used instead.`\n  );\n}\n\n","import { gql } from \"@apollo/client\";\n\nexport const GET_BOARD_BY_ID = gql`\n  query getBoardById($id: Int!) {\n    getBoardById(id: $id) {\n      ok\n      err\n      data {\n        id\n        title\n        content\n        category\n        private\n        type\n        writer\n        showAttach\n        inputCreatedAt\n        replies {\n          id\n          content\n        }\n        files {\n          id\n          url\n          fileName\n        }\n        images {\n          id\n          url\n          fileName\n        }\n        link\n        createdAt\n        updatedAt\n        deleteAt\n      }\n    }\n  }\n`;\n\nexport const GET_LINK = gql`\n  query getLinks {\n    getLinks {\n      ok\n      err\n      data {\n        id\n        url\n        title\n        createdAt\n      }\n    }\n  }\n`;\n\nexport const GET_BOARD = gql`\n  query getBoard {\n    getBoard {\n      ok\n      err\n      data {\n        id\n        title\n        content\n        category\n        link\n        createdAt\n        updatedAt\n        deleteAt\n      }\n    }\n  }\n`;\n\nexport const USER_LOGIN = gql`\n  mutation UserLogin($id: String!, $pwd: String!) {\n    UserLogin(id: $id, pwd: $pwd) {\n      success\n      error\n      data {\n        id\n        stno\n      }\n    }\n  }\n`;\n\nexport const GET_BOARD_BY_MONTH = gql`\n  query getBoardByMonth($category: String!) {\n    getBoardByMonth(category: $category) {\n      ok\n      err\n      data {\n        id\n        title\n        content\n        category\n        link\n        createdAt\n        inputCreatedAt\n        updatedAt\n        deleteAt\n      }\n    }\n  }\n`;\n\nexport const GET_POPUP_STATUS = gql`\n  query getPopupStatus {\n    getPopupStatus {\n      ok\n      err\n      data {\n        url\n        up\n        link\n      }\n    }\n  }\n`;\n\nexport const GET_VIDEO_LINK = gql`\n  query getVideoLink {\n    getVideoLink {\n      ok\n      err\n      link\n    }\n  }\n`;\n\nexport const SEARCH_BOARD = gql`\n  query searchBoard($category: String!, $title: String!) {\n    searchBoard(category: $category, title: $title) {\n      ok\n      err\n      data {\n        id\n        title\n        content\n        category\n        private\n        type\n        writer\n        link\n        createdAt\n        updatedAt\n        deleteAt\n      }\n    }\n  }\n`;\n\nexport const SEARCH_BOARD_BY_CONTENT = gql`\n  query searchBoardByContent($category: String!, $content: String!) {\n    searchBoardByContent(category: $category, content: $content) {\n      ok\n      err\n      data {\n        id\n        title\n        content\n        category\n        private\n        type\n        writer\n        link\n        createdAt\n        updatedAt\n        deleteAt\n      }\n    }\n  }\n`;\n","import { Row } from '../grid';\nexport default Row;","import { Col } from '../grid';\nexport default Col;","import styled from \"@emotion/styled\";\nimport { Col as antCol, Row } from \"antd\";\n\nexport const Container = styled.div``;\n\nexport const Col = styled(antCol)`\n  height: 300px;\n`;\n\nexport const TableRowSpan = styled.span`\n  cursor: pointer;\n  &:hover {\n    transition: 0.2s linear;\n    color: #438ef7;\n  }\n`;\n\nexport const ExtendedRow = styled(Row)`\n  display: flex;\n  flex-direction: column;\n`;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { ConfigConsumer } from '../config-provider';\n\nvar Divider = function Divider(props) {\n  return /*#__PURE__*/React.createElement(ConfigConsumer, null, function (_ref) {\n    var _classNames;\n\n    var getPrefixCls = _ref.getPrefixCls,\n        direction = _ref.direction;\n\n    var customizePrefixCls = props.prefixCls,\n        _props$type = props.type,\n        type = _props$type === void 0 ? 'horizontal' : _props$type,\n        _props$orientation = props.orientation,\n        orientation = _props$orientation === void 0 ? 'center' : _props$orientation,\n        className = props.className,\n        children = props.children,\n        dashed = props.dashed,\n        plain = props.plain,\n        restProps = __rest(props, [\"prefixCls\", \"type\", \"orientation\", \"className\", \"children\", \"dashed\", \"plain\"]);\n\n    var prefixCls = getPrefixCls('divider', customizePrefixCls);\n    var orientationPrefix = orientation.length > 0 ? \"-\".concat(orientation) : orientation;\n    var hasChildren = !!children;\n    var classString = classNames(prefixCls, \"\".concat(prefixCls, \"-\").concat(type), (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-with-text\"), hasChildren), _defineProperty(_classNames, \"\".concat(prefixCls, \"-with-text\").concat(orientationPrefix), hasChildren), _defineProperty(_classNames, \"\".concat(prefixCls, \"-dashed\"), !!dashed), _defineProperty(_classNames, \"\".concat(prefixCls, \"-plain\"), !!plain), _defineProperty(_classNames, \"\".concat(prefixCls, \"-rtl\"), direction === 'rtl'), _classNames), className);\n    return /*#__PURE__*/React.createElement(\"div\", _extends({\n      className: classString\n    }, restProps, {\n      role: \"separator\"\n    }), children && /*#__PURE__*/React.createElement(\"span\", {\n      className: \"\".concat(prefixCls, \"-inner-text\")\n    }, children));\n  });\n};\n\nexport default Divider;","export const getDate = (time: string) => {\n  const itemDate = new Date(Math.floor(parseInt(time, 10) / 1000) * 1000);\n  const date =\n    itemDate.getFullYear() +\n    \"-\" +\n    (itemDate.getMonth() + 1 >= 10\n      ? itemDate.getMonth() + 1\n      : `0${itemDate.getMonth() + 1}`) +\n    \"-\" +\n    (itemDate.getDate() >= 10 ? itemDate.getDate() : `0${itemDate.getDate()}`);\n  return date;\n};\n\nexport const convertMonth = (name: string): string => {\n  switch (name) {\n    case \"Jan\":\n      return \"1\";\n    case \"Feb\":\n      return \"2\";\n    case \"Mar\":\n      return \"3\";\n    case \"Apr\":\n      return \"4\";\n    case \"May\":\n      return \"5\";\n    case \"Jun\":\n      return \"6\";\n    case \"Jul\":\n      return \"7\";\n    case \"Aug\":\n      return \"8\";\n    case \"Sep\":\n      return \"9\";\n    case \"Oct\":\n      return \"10\";\n    case \"Nov\":\n      return \"11\";\n    case \"Dec\":\n      return \"12\";\n    default:\n      return name;\n  }\n};\n\nexport const convertDay = (name: string): string => {\n  switch (name) {\n    case \"Sun\":\n      return \"일\";\n    case \"Mon\":\n      return \"월\";\n    case \"Tue\":\n      return \"화\";\n    case \"Wed\":\n      return \"수\";\n    case \"Thu\":\n      return \"목\";\n    case \"Fri\":\n      return \"금\";\n    case \"Sat\":\n      return \"토\";\n    case \"0\":\n      return \"일\";\n    case \"1\":\n      return \"월\";\n    case \"2\":\n      return \"화\";\n    case \"3\":\n      return \"수\";\n    case \"4\":\n      return \"목\";\n    case \"5\":\n      return \"금\";\n    case \"6\":\n      return \"토\";\n    default:\n      return name;\n  }\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Container, Col, TableRowSpan } from \"./styles\";\nimport { Row, Typography, Table, Divider } from \"antd\";\nimport { useQuery } from \"@apollo/client\";\nimport { GET_BOARD, GET_LINK } from \"../../../queries/sharedQuery\";\nimport {\n  getBoard,\n  getBoard_getBoard_data,\n  getLinks,\n} from \"../../../typings/api\";\nimport Column from \"antd/lib/table/Column\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport { getDate } from \"../../../utils/convertDate\";\n\ninterface LocationProps {\n  refresh?: boolean;\n}\n\nconst Dashboard: React.VFC = () => {\n  const { data, loading, refetch, error } = useQuery<getBoard>(GET_BOARD);\n  const { refetch: linkRefetch, error: linkError } =\n    useQuery<getLinks>(GET_LINK);\n  const { state } = useLocation<LocationProps>();\n  const [notice, setNotice] = useState<\n    Array<getBoard_getBoard_data> | undefined\n  >();\n  const [admission, setAdmission] = useState<\n    Array<getBoard_getBoard_data> | undefined\n  >();\n\n  useEffect(() => {\n    if (data?.getBoard.data) {\n      setNotice(\n        data.getBoard.data\n          .filter((item) => item.category.includes(\"community-notice\"))\n          .slice(0, 5)\n      );\n      setAdmission(\n        data.getBoard.data\n          .filter((item) => item.category.includes(\"community-administration\"))\n          .slice(0, 5)\n      );\n    }\n  }, [data]);\n\n  useEffect(() => {\n    const excuteRefetch = () => {\n      if (refetch) refetch();\n      if (linkRefetch) linkRefetch();\n    };\n    if (state && state.refresh) excuteRefetch();\n    return () => excuteRefetch();\n  }, [refetch, state, linkRefetch]);\n\n  if (error) console.error(error);\n  if (linkError) console.error(linkError);\n\n  return (\n    <Container>\n      {loading ? (\n        <>loading...</>\n      ) : (\n        <Row gutter={[30, 40]} justify={\"space-between\"}>\n          <Col span={11}>\n            <Table\n              title={() => (\n                <Typography.Title level={4}>공지사항</Typography.Title>\n              )}\n              dataSource={notice}\n              showHeader={false}\n              rowKey={\"noticeid\"}\n              pagination={false}\n              size=\"middle\"\n            >\n              <Column\n                dataIndex=\"title\"\n                align=\"left\"\n                ellipsis={true}\n                key={\"noticesubid\"}\n                render={(value, record: getBoard_getBoard_data, i) => {\n                  return (\n                    <TableRowSpan key={i}>\n                      <Link\n                        to={`/admin/community/detail-community?category=${record.category}&id=${record.id}`}\n                      >\n                        {value}\n                      </Link>\n                    </TableRowSpan>\n                  );\n                }}\n              />\n              <Column\n                dataIndex=\"createdAt\"\n                align=\"right\"\n                key={\"noticetime\"}\n                render={(value, record: getBoard_getBoard_data, i) => {\n                  return (\n                    <span key={i}>\n                      <Link\n                        to={`/admin/community/detail-community?category=${record.category}&id=${record.id}`}\n                      >\n                        {getDate(value)}\n                      </Link>\n                    </span>\n                  );\n                }}\n              />\n            </Table>\n          </Col>\n          <Col span={11}>\n            <Table\n              title={() => (\n                <Typography.Title level={4}>학사공지</Typography.Title>\n              )}\n              dataSource={admission}\n              showHeader={false}\n              rowKey={\"admissionkey\"}\n              pagination={false}\n              size=\"middle\"\n            >\n              <Column\n                dataIndex=\"title\"\n                align=\"left\"\n                ellipsis={true}\n                key={\"subadmissionkey\"}\n                render={(value, record: getBoard_getBoard_data, id) => {\n                  return (\n                    <TableRowSpan key={id}>\n                      <Link\n                        to={`/admin/community/detail-community?category=${record.category}&id=${record.id}`}\n                      >\n                        {value}\n                      </Link>\n                    </TableRowSpan>\n                  );\n                }}\n              />\n              <Column\n                dataIndex=\"createdAt\"\n                align=\"right\"\n                key={\"subadmissionkeydate\"}\n                render={(value, record: getBoard_getBoard_data, idx) => {\n                  return (\n                    <span key={idx}>\n                      <Link\n                        to={`/admin/community/detail-community?category=${record.category}&id=${record.id}`}\n                      >\n                        {getDate(value)}\n                      </Link>\n                    </span>\n                  );\n                }}\n              />\n            </Table>\n          </Col>\n        </Row>\n      )}\n      <Divider />\n    </Container>\n  );\n};\n\nexport default Dashboard;\n"],"sourceRoot":""}