{"version":3,"sources":["queries/sharedQuery.ts","utils/convertDate.ts","pages/Admin/BoardDetail/styles.tsx","pages/Admin/BoardDetail/index.tsx"],"names":["GET_BOARD_BY_ID","gql","GET_LINK","GET_BOARD","USER_LOGIN","GET_BOARD_BY_MONTH","getDate","time","itemDate","Date","Math","floor","parseInt","getFullYear","getMonth","Container","styled","div","props","url","Button","Btn","BoardDetail","search","useLocation","param","useParams","history","useHistory","queryObj","queryString","parse","id","category","useState","board","setBoard","files","setFiles","images","setImages","useQuery","variables","data","loading","useMutation","DELETE_BOARD","onCompleted","deleteBoard","ok","err","toast","success","push","pathname","state","refresh","console","log","error","handleDeleteBoard","useCallback","useEffect","getBoardById","type","onClick","goBack","bordered","layout","style","display","flexDirection","Item","label","span","labelStyle","width","Title","level","title","Text","private","createdAt","length","map","elem","idx","href","download","target","rel","fileName","src","alt","whiteSpace","content","className","to","danger"],"mappings":"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","file":"static/js/27.f5f2da23.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\n\nexport const GET_BOARD_BY_ID = gql`\n  query getBoardById($id: Int!) {\n    getBoardById(id: $id) {\n      ok\n      err\n      data {\n        id\n        title\n        content\n        category\n        private\n        type\n        files {\n          id\n          url\n          fileName\n        }\n        images {\n          id\n          url\n          fileName\n        }\n        link\n        createdAt\n        updatedAt\n        deleteAt\n      }\n    }\n  }\n`;\n\nexport const GET_LINK = gql`\n  query getLinks {\n    getLinks {\n      ok\n      err\n      data {\n        id\n        url\n        title\n        createdAt\n      }\n    }\n  }\n`;\n\nexport const GET_BOARD = gql`\n  query getBoard {\n    getBoard {\n      ok\n      err\n      data {\n        id\n        title\n        content\n        category\n        link\n        createdAt\n        updatedAt\n        deleteAt\n      }\n    }\n  }\n`;\n\nexport const USER_LOGIN = gql`\n  mutation UserLogin($id: String!, $pwd: String!) {\n    UserLogin(id: $id, pwd: $pwd) {\n      success\n      error\n      data {\n        id\n        stno\n      }\n    }\n  }\n`;\n\nexport const GET_BOARD_BY_MONTH = gql`\n  query getBoardByMonth($category: String!) {\n    getBoardByMonth(category: $category) {\n      ok\n      err\n      data {\n        id\n        title\n        content\n        category\n        link\n        createdAt\n        updatedAt\n        deleteAt\n      }\n    }\n  }\n`;\n","export const getDate = (time: string) => {\n  const itemDate = new Date(Math.floor(parseInt(time, 10) / 1000) * 1000);\n  const date =\n    itemDate.getFullYear() +\n    \"-\" +\n    (itemDate.getMonth() + 1 >= 10\n      ? itemDate.getMonth() + 1\n      : `0${itemDate.getMonth() + 1}`) +\n    \"-\" +\n    (itemDate.getDate() >= 10 ? itemDate.getDate() : `0${itemDate.getDate()}`);\n  return date;\n};\n\nexport const convertMonth = (name: string): string => {\n  switch (name) {\n    case \"Jan\":\n      return \"1\";\n    case \"Feb\":\n      return \"2\";\n    case \"Mar\":\n      return \"3\";\n    case \"Apr\":\n      return \"4\";\n    case \"May\":\n      return \"5\";\n    case \"Jun\":\n      return \"6\";\n    case \"Jul\":\n      return \"7\";\n    case \"Aug\":\n      return \"8\";\n    case \"Sep\":\n      return \"9\";\n    case \"Oct\":\n      return \"10\";\n    case \"Nov\":\n      return \"11\";\n    case \"Dec\":\n      return \"12\";\n    default:\n      return name;\n  }\n};\n\nexport const convertDay = (name: string): string => {\n  switch (name) {\n    case \"Sun\":\n      return \"일\";\n    case \"Mon\":\n      return \"월\";\n    case \"Tue\":\n      return \"화\";\n    case \"Wed\":\n      return \"수\";\n    case \"Thu\":\n      return \"목\";\n    case \"Fri\":\n      return \"금\";\n    case \"Sat\":\n      return \"토\";\n    case \"0\":\n      return \"일\";\n    case \"1\":\n      return \"월\";\n    case \"2\":\n      return \"화\";\n    case \"3\":\n      return \"수\";\n    case \"4\":\n      return \"목\";\n    case \"5\":\n      return \"금\";\n    case \"6\":\n      return \"토\";\n    default:\n      return name;\n  }\n};\n","import styled from \"@emotion/styled\";\nimport { Button as Btn } from \"antd\";\n\ninterface UrlProps {\n  url: string;\n}\n\nexport const CarouselDiv = styled.div<UrlProps>`\n  background-image: url(${(props) => props.url});\n  width: 100%;\n  height: 300px;\n  background-size: contain;\n`;\n\nexport const Container = styled.div`\n  & .button-group {\n    display: flex;\n    align-items: center;\n  }\n`;\n\nexport const Button = styled(Btn)`\n  margin: 15px 0;\n  margin-right: 15px;\n`;\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport queryString from \"query-string\";\nimport { useHistory, useLocation, useParams } from \"react-router\";\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { GET_BOARD_BY_ID } from \"../../../queries/sharedQuery\";\nimport {\n  getBoardById,\n  getBoardByIdVariables,\n  getBoardById_getBoardById_data,\n  getBoardById_getBoardById_data_files,\n  getBoardById_getBoardById_data_images,\n} from \"../../../typings/api\";\nimport { Descriptions, Typography } from \"antd\";\nimport { Button, Container } from \"./styles\";\nimport { DELETE_BOARD } from \"../../../queries/adminQuery\";\nimport { toast } from \"react-toastify\";\nimport { Link } from \"react-router-dom\";\nimport { getDate } from \"../../../utils/convertDate\";\nimport Text from \"antd/lib/typography/Text\";\n\ninterface locationProps {\n  search: string;\n}\n\ninterface paramProps {\n  param: string;\n}\n\nconst BoardDetail: React.VFC = () => {\n  const { search } = useLocation<locationProps>();\n  const { param } = useParams<paramProps>();\n  const history = useHistory();\n  const queryObj = queryString.parse(search);\n  const { id, category } = queryObj;\n  const [board, setBoard] = useState<getBoardById_getBoardById_data>();\n  const [files, setFiles] =\n    useState<(getBoardById_getBoardById_data_files | undefined | null)[]>();\n  const [images, setImages] =\n    useState<(getBoardById_getBoardById_data_images | undefined | null)[]>();\n\n  const { data, loading } = useQuery<getBoardById, getBoardByIdVariables>(\n    GET_BOARD_BY_ID,\n    {\n      variables: {\n        id: parseInt(id as string, 10),\n      },\n    }\n  );\n\n  const [deleteBoard] = useMutation(DELETE_BOARD, {\n    onCompleted: ({ deleteBoard }) => {\n      const { ok, err } = deleteBoard;\n      if (ok) {\n        toast.success(\"게시물이 삭제 되었습니다.\");\n        history.push({\n          pathname: `/admin/${param}/${category}`,\n          state: { refresh: true },\n        });\n      } else {\n        console.log(err);\n        toast.error(\"게시물을 삭제 할 수 없습니다\");\n      }\n    },\n  });\n\n  const handleDeleteBoard = useCallback(() => {\n    deleteBoard({\n      variables: {\n        id: parseInt(id as string, 10),\n      },\n    });\n  }, [id, deleteBoard]);\n\n  useEffect(() => {\n    if (data && data.getBoardById && data.getBoardById.data) {\n      setBoard(data.getBoardById.data);\n    }\n    if (\n      data &&\n      data.getBoardById &&\n      data.getBoardById.data &&\n      data.getBoardById.data.files\n    ) {\n      setFiles(data.getBoardById.data.files);\n    }\n    if (\n      data &&\n      data.getBoardById &&\n      data.getBoardById.data &&\n      data.getBoardById.data.images\n    ) {\n      setImages(data.getBoardById.data.images);\n    }\n  }, [data]);\n\n  if (loading) {\n    return <>loading</>;\n  }\n\n  return (\n    <Container>\n      <Button type=\"ghost\" onClick={() => history.goBack()}>\n        뒤로\n      </Button>\n      <Descriptions\n        bordered\n        // column={{ xxl: 4, xl: 3, lg: 3, md: 3, sm: 2, xs: 1 }}\n        layout=\"horizontal\"\n        style={{ display: \"flex\", flexDirection: \"column\" }}\n      >\n        <Descriptions.Item\n          key=\"title\"\n          label=\"제목\"\n          span={3}\n          labelStyle={{ width: 100 }}\n        >\n          <Typography.Title level={3}>{board?.title}</Typography.Title>\n        </Descriptions.Item>\n        <Descriptions.Item\n          key=\"status\"\n          label=\"상태\"\n          span={3}\n          labelStyle={{ width: 100 }}\n        >\n          <Typography.Text type={board?.private ? \"success\" : \"danger\"}>\n            {board?.private ? \"공개\" : \"비공개\"}\n          </Typography.Text>\n        </Descriptions.Item>\n        <Descriptions.Item\n          key=\"date\"\n          label=\"작성일\"\n          span={3}\n          labelStyle={{ width: 100 }}\n        >\n          {getDate(board?.createdAt || \"\")}\n        </Descriptions.Item>\n        <Descriptions.Item\n          key=\"file\"\n          label=\"파일\"\n          span={3}\n          labelStyle={{ width: 100 }}\n        >\n          {files && files.length !== 0 ? (\n            <>\n              {files.map((elem, idx) => {\n                return (\n                  <span key={idx} style={{ display: \"inline-block\" }}>\n                    <a\n                      href={elem?.url}\n                      download\n                      target={\"_blank\"}\n                      rel=\"noreferrer\"\n                    >\n                      {elem?.fileName}\n                    </a>\n                  </span>\n                );\n              })}\n            </>\n          ) : (\n            <>첨부파일 없음</>\n          )}\n        </Descriptions.Item>\n        {param === \"achievement\" && (\n          <Descriptions.Item\n            label=\"이미지\"\n            span={4}\n            labelStyle={{ width: 100 }}\n            key=\"image\"\n          >\n            {images && images.length !== 0 ? (\n              <img\n                src={images[images.length - 1]!.url}\n                alt=\"newsimage\"\n                width={300}\n              />\n            ) : (\n              <>이미지 없음</>\n            )}\n          </Descriptions.Item>\n        )}\n        <Descriptions.Item label=\"내용\" span={4} key=\"content\">\n          <span style={{ whiteSpace: \"pre-wrap\" }}>{board?.content}</span>\n        </Descriptions.Item>\n      </Descriptions>\n      <div className=\"button-group\">\n        <Link\n          to={`/admin/${param}/edit-${param}?category=${category}&id=${id}`}\n        >\n          <Button type=\"primary\">수정</Button>\n        </Link>\n        <Button type=\"primary\" danger onClick={handleDeleteBoard}>\n          삭제\n        </Button>\n      </div>\n    </Container>\n  );\n};\n\nexport default BoardDetail;\n"],"sourceRoot":""}