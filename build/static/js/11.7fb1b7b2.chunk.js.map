{"version":3,"sources":["../../../../src/react/parser/index.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../../../../src/react/data/OperationData.ts","../../../../src/react/data/QueryData.ts","../../../../../src/react/hooks/utils/useBaseQuery.ts","../../../../../src/react/hooks/utils/useDeepMemo.ts","../../../../../src/react/hooks/utils/useAfterFastRefresh.ts","../node_modules/@ant-design/icons-svg/es/asn/CheckOutlined.js","../node_modules/@ant-design/icons/es/icons/CheckOutlined.js","../../../../src/react/hooks/useQuery.ts","../../../../src/react/data/MutationData.ts","../../../../src/react/hooks/useMutation.ts","../node_modules/@ant-design/icons-svg/es/asn/EditOutlined.js","../node_modules/@ant-design/icons/es/icons/EditOutlined.js","../node_modules/@ant-design/icons-svg/es/asn/DeleteOutlined.js","../node_modules/@ant-design/icons/es/icons/DeleteOutlined.js","../node_modules/antd/es/divider/index.js","../node_modules/@ant-design/icons-svg/es/asn/PlusOutlined.js","../node_modules/@ant-design/icons/es/icons/PlusOutlined.js"],"names":["DocumentType","cache","Map","operationName","type","name","Query","Mutation","Subscription","parser","document","variables","cached","get","fragments","definitions","filter","x","kind","queries","operation","mutations","subscriptions","length","definition","module","exports","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","options","context","isMounted","previousOptions","getOptions","setOptions","newOptions","storePrevious","unmount","refreshClient","client","isNew","cleanup","verifyDocumentType","requiredOperationName","usedOperationName","onNewData","runLazy","previous","Object","create","runLazyQuery","lazyOptions","obsRefetch","currentObservable","refetch","obsFetchMore","fetchMoreOptions","fetchMore","obsUpdateQuery","mapFn","updateQuery","obsStartPolling","pollInterval","startPolling","obsStopPolling","stopPolling","obsSubscribeToMore","subscribeToMore","execute","skip","query","removeQuerySubscription","removeObservable","updateObservableQuery","getExecuteSsrResult","getExecuteResult","executeLazy","loading","networkStatus","ready","called","data","fetchData","ssr","startQuerySubscription","afterExecute","lazy","ssrInitiated","handleErrorOrCompleted","bind","result","renderPromises","ssrDisabled","fetchDisabled","disableNetworkFetches","ssrLoading","stale","observableQueryFields","addQueryPromise","prepareObservableQueryOptions","displayName","fetchPolicy","initializeObservableQuery","getSSRObservable","observableQueryOptions","children","watchQuery","registerSSRObservable","newObservableQueryOptions","catch","currentSubscription","subscribe","next","previousResult","resubscribeToQuery","hasOwnProperty","last","resetLastResults","currentResult","getCurrentResult","partial","errors","graphQLErrors","assign","getLastResult","keys","previousData","resetQueryStoreErrors","onCompleted","onError","unsubscribe","andDelete","useBaseQuery","tick","forceUpdate","updatedOptions","queryDataRef","queryData","current","memoFn","ref","useDeepMemo","queryResult","__DEV__","effectFn","useAfterFastRefresh","CheckOutlined","props","React","AntdIcon","_objectSpread","icon","CheckOutlinedSvg","useQuery","setResult","runMutation","mutationFunctionOptions","onMutationStart","mutationId","generateNewMutationId","mutate","response","onMutationCompleted","onMutationError","mutation","mostRecentMutationId","ignoreResults","updateResult","isMostRecentMutation","OperationData","useMutation","mutationDataRef","mutationData","EditOutlined","EditOutlinedSvg","DeleteOutlined","DeleteOutlinedSvg","__rest","s","e","t","p","prototype","call","indexOf","getOwnPropertySymbols","i","propertyIsEnumerable","Divider","ConfigConsumer","_ref","_classNames","getPrefixCls","direction","customizePrefixCls","prefixCls","_props$type","_props$orientation","orientation","className","dashed","plain","restProps","orientationPrefix","concat","hasChildren","classString","classNames","_defineProperty","_extends","role","PlusOutlined","PlusOutlinedSvg"],"mappings":"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","file":"static/js/11.7fb1b7b2.chunk.js","sourcesContent":["import { invariant } from '../../utilities/globals';\n\nimport {\n  DocumentNode,\n  DefinitionNode,\n  VariableDefinitionNode,\n  OperationDefinitionNode\n} from 'graphql';\n\nexport enum DocumentType {\n  Query,\n  Mutation,\n  Subscription\n}\n\nexport interface IDocumentDefinition {\n  type: DocumentType;\n  name: string;\n  variables: ReadonlyArray<VariableDefinitionNode>;\n}\n\nconst cache = new Map();\n\nexport function operationName(type: DocumentType) {\n  let name;\n  switch (type) {\n    case DocumentType.Query:\n      name = 'Query';\n      break;\n    case DocumentType.Mutation:\n      name = 'Mutation';\n      break;\n    case DocumentType.Subscription:\n      name = 'Subscription';\n      break;\n  }\n  return name;\n}\n\n// This parser is mostly used to saftey check incoming documents.\nexport function parser(document: DocumentNode): IDocumentDefinition {\n  const cached = cache.get(document);\n  if (cached) return cached;\n\n  let variables, type, name;\n\n  invariant(\n    !!document && !!document.kind,\n    `Argument of ${document} passed to parser was not a valid GraphQL ` +\n      `DocumentNode. You may need to use 'graphql-tag' or another method ` +\n      `to convert your operation into a document`\n  );\n\n  const fragments = document.definitions.filter(\n    (x: DefinitionNode) => x.kind === 'FragmentDefinition'\n  );\n\n  const queries = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'query'\n  );\n\n  const mutations = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'mutation'\n  );\n\n  const subscriptions = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'subscription'\n  );\n\n  invariant(\n    !fragments.length ||\n      (queries.length || mutations.length || subscriptions.length),\n    `Passing only a fragment to 'graphql' is not yet supported. ` +\n      `You must include a query, subscription or mutation as well`\n  );\n\n  invariant(\n    queries.length + mutations.length + subscriptions.length <= 1,\n    `react-apollo only supports a query, subscription, or a mutation per HOC. ` +\n      `${document} had ${queries.length} queries, ${subscriptions.length} ` +\n      `subscriptions and ${mutations.length} mutations. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n\n  const definitions = queries.length\n    ? queries\n    : mutations.length\n    ? mutations\n    : subscriptions;\n\n  invariant(\n    definitions.length === 1,\n    `react-apollo only supports one definition per HOC. ${document} had ` +\n      `${definitions.length} definitions. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  const definition = definitions[0] as OperationDefinitionNode;\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === 'Name') {\n    name = definition.name.value;\n  } else {\n    name = 'data'; // fallback to using data if no name\n  }\n\n  const payload = { name, type, variables };\n  cache.set(document, payload);\n  return payload;\n}\n","module.exports = require(\"regenerator-runtime\");\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import { invariant } from '../../utilities/globals';\n\nimport { DocumentNode } from 'graphql';\nimport { equal } from '@wry/equality';\n\nimport { ApolloClient } from '../../core';\nimport { DocumentType, parser, operationName } from '../parser';\nimport { CommonOptions } from '../types/types';\n\nexport abstract class OperationData<TOptions = any> {\n  public isMounted: boolean = false;\n  public previousOptions: CommonOptions<TOptions> = {} as CommonOptions<\n    TOptions\n  >;\n  public context: any = {};\n  public client: ApolloClient<object>;\n\n  private options: CommonOptions<TOptions> = {} as CommonOptions<TOptions>;\n\n  constructor(options?: CommonOptions<TOptions>, context?: any) {\n    this.options = options || ({} as CommonOptions<TOptions>);\n    this.context = context || {};\n  }\n\n  public getOptions(): CommonOptions<TOptions> {\n    return this.options;\n  }\n\n  public setOptions(\n    newOptions: CommonOptions<TOptions>,\n    storePrevious: boolean = false\n  ) {\n    if (storePrevious && !equal(this.options, newOptions)) {\n      this.previousOptions = this.options;\n    }\n    this.options = newOptions;\n  }\n\n  public abstract execute(...args: any): any;\n  public abstract afterExecute(...args: any): void | (() => void);\n  public abstract cleanup(): void;\n\n  protected unmount() {\n    this.isMounted = false;\n  }\n\n  protected refreshClient() {\n    const client =\n      (this.options && this.options.client) ||\n      (this.context && this.context.client);\n\n    invariant(\n      !!client,\n      'Could not find \"client\" in the context or passed in as an option. ' +\n        'Wrap the root component in an <ApolloProvider>, or pass an ' +\n        'ApolloClient instance in via options.'\n    );\n\n    let isNew = false;\n    if (client !== this.client) {\n      isNew = true;\n      this.client = client;\n      this.cleanup();\n    }\n    return {\n      client: this.client as ApolloClient<object>,\n      isNew\n    };\n  }\n\n  protected verifyDocumentType(document: DocumentNode, type: DocumentType) {\n    const operation = parser(document);\n    const requiredOperationName = operationName(type);\n    const usedOperationName = operationName(operation.type);\n    invariant(\n      operation.type === type,\n      `Running a ${requiredOperationName} requires a graphql ` +\n        `${requiredOperationName}, but a ${usedOperationName} was used instead.`\n    );\n  }\n}\n","import { equal } from '@wry/equality';\n\nimport { ApolloError } from '../../errors';\n\nimport {\n  ApolloClient,\n  NetworkStatus,\n  FetchMoreQueryOptions,\n  SubscribeToMoreOptions,\n  ObservableQuery,\n  FetchMoreOptions,\n  UpdateQueryOptions,\n  DocumentNode,\n  TypedDocumentNode,\n} from '../../core';\n\nimport {\n  ObservableSubscription\n} from '../../utilities';\n\nimport { DocumentType } from '../parser';\nimport {\n  QueryResult,\n  QueryDataOptions,\n  QueryTuple,\n  QueryLazyOptions,\n  ObservableQueryFields,\n} from '../types/types';\nimport { OperationData } from './OperationData';\n\ntype ObservableQueryOptions<TData, TVars> =\n  ReturnType<QueryData<TData, TVars>[\"prepareObservableQueryOptions\"]>;\n\nexport class QueryData<TData, TVariables> extends OperationData<\n  QueryDataOptions<TData, TVariables>\n> {\n  public onNewData: () => void;\n  public currentObservable?: ObservableQuery<TData, TVariables>;\n  private currentSubscription?: ObservableSubscription;\n  private runLazy: boolean = false;\n  private lazyOptions?: QueryLazyOptions<TVariables>;\n  private previous: {\n    client?: ApolloClient<object>;\n    query?: DocumentNode | TypedDocumentNode<TData, TVariables>;\n    observableQueryOptions?: ObservableQueryOptions<TData, TVariables>;\n    result?: QueryResult<TData, TVariables>;\n    loading?: boolean;\n    options?: QueryDataOptions<TData, TVariables>;\n    error?: ApolloError;\n  } = Object.create(null);\n\n  constructor({\n    options,\n    context,\n    onNewData\n  }: {\n    options: QueryDataOptions<TData, TVariables>;\n    context: any;\n    onNewData: () => void;\n  }) {\n    super(options, context);\n    this.onNewData = onNewData;\n  }\n\n  public execute(): QueryResult<TData, TVariables> {\n    this.refreshClient();\n\n    const { skip, query } = this.getOptions();\n    if (skip || query !== this.previous.query) {\n      this.removeQuerySubscription();\n      this.removeObservable(!skip);\n      this.previous.query = query;\n    }\n\n    this.updateObservableQuery();\n\n    return this.getExecuteSsrResult() || this.getExecuteResult();\n  }\n\n  public executeLazy(): QueryTuple<TData, TVariables> {\n    return !this.runLazy\n      ? [\n          this.runLazyQuery,\n          {\n            loading: false,\n            networkStatus: NetworkStatus.ready,\n            called: false,\n            data: undefined\n          }\n        ]\n      : [this.runLazyQuery, this.execute()];\n  }\n\n  // For server-side rendering\n  public fetchData(): Promise<void> | boolean {\n    const options = this.getOptions();\n    if (options.skip || options.ssr === false) return false;\n    return new Promise(resolve => this.startQuerySubscription(resolve));\n  }\n\n  public afterExecute({ lazy = false }: { lazy?: boolean } = {}) {\n    this.isMounted = true;\n    const options = this.getOptions();\n    if (this.currentObservable && !this.ssrInitiated()) {\n      this.startQuerySubscription();\n    }\n\n    if (!lazy || this.runLazy) {\n      this.handleErrorOrCompleted();\n    }\n\n    this.previousOptions = options;\n    return this.unmount.bind(this);\n  }\n\n  public cleanup() {\n    this.removeQuerySubscription();\n    this.removeObservable(true);\n    delete this.previous.result;\n  }\n\n  public getOptions() {\n    const options = super.getOptions();\n\n    if (this.lazyOptions) {\n      options.variables = {\n        ...options.variables,\n        ...this.lazyOptions.variables\n      } as TVariables;\n      options.context = {\n        ...options.context,\n        ...this.lazyOptions.context\n      };\n    }\n\n    // skip is not supported when using lazy query execution.\n    if (this.runLazy) {\n      delete options.skip;\n    }\n\n    return options;\n  }\n\n  public ssrInitiated() {\n    return this.context && this.context.renderPromises;\n  }\n\n  private runLazyQuery = (options?: QueryLazyOptions<TVariables>) => {\n    this.cleanup();\n    this.runLazy = true;\n    this.lazyOptions = options;\n    this.onNewData();\n  };\n\n  private getExecuteSsrResult() {\n    const { ssr, skip } = this.getOptions();\n    const ssrDisabled = ssr === false;\n    const fetchDisabled = this.refreshClient().client.disableNetworkFetches;\n\n    const ssrLoading = {\n      loading: true,\n      networkStatus: NetworkStatus.loading,\n      called: true,\n      data: undefined,\n      stale: false,\n      client: this.client,\n      ...this.observableQueryFields(),\n    } as QueryResult<TData, TVariables>;\n\n    // If SSR has been explicitly disabled, and this function has been called\n    // on the server side, return the default loading state.\n    if (ssrDisabled && (this.ssrInitiated() || fetchDisabled)) {\n      this.previous.result = ssrLoading;\n      return ssrLoading;\n    }\n\n    if (this.ssrInitiated()) {\n      const result = this.getExecuteResult() || ssrLoading;\n      if (result.loading && !skip) {\n        this.context.renderPromises!.addQueryPromise(this, () => null);\n      }\n      return result;\n    }\n  }\n\n  private prepareObservableQueryOptions() {\n    const options = this.getOptions();\n    this.verifyDocumentType(options.query, DocumentType.Query);\n    const displayName = options.displayName || 'Query';\n\n    // Set the fetchPolicy to cache-first for network-only and cache-and-network\n    // fetches for server side renders.\n    if (\n      this.ssrInitiated() &&\n      (options.fetchPolicy === 'network-only' ||\n        options.fetchPolicy === 'cache-and-network')\n    ) {\n      options.fetchPolicy = 'cache-first';\n    }\n\n    return {\n      ...options,\n      displayName,\n      context: options.context,\n    };\n  }\n\n  private initializeObservableQuery() {\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    if (this.ssrInitiated()) {\n      this.currentObservable = this.context!.renderPromises!.getSSRObservable(\n        this.getOptions()\n      );\n    }\n\n    if (!this.currentObservable) {\n      const observableQueryOptions = this.prepareObservableQueryOptions();\n\n      this.previous.observableQueryOptions = {\n        ...observableQueryOptions,\n        children: void 0,\n      };\n      this.currentObservable = this.refreshClient().client.watchQuery({\n        ...observableQueryOptions\n      });\n\n      if (this.ssrInitiated()) {\n        this.context!.renderPromises!.registerSSRObservable(\n          this.currentObservable,\n          observableQueryOptions\n        );\n      }\n    }\n  }\n\n  private updateObservableQuery() {\n    // If we skipped initially, we may not have yet created the observable\n    if (!this.currentObservable) {\n      this.initializeObservableQuery();\n      return;\n    }\n\n    const newObservableQueryOptions = {\n      ...this.prepareObservableQueryOptions(),\n      children: void 0,\n    };\n\n    if (this.getOptions().skip) {\n      this.previous.observableQueryOptions = newObservableQueryOptions;\n      return;\n    }\n\n    if (\n      !equal(newObservableQueryOptions, this.previous.observableQueryOptions)\n    ) {\n      this.previous.observableQueryOptions = newObservableQueryOptions;\n      this.currentObservable\n        .setOptions(newObservableQueryOptions)\n        // The error will be passed to the child container, so we don't\n        // need to log it here. We could conceivably log something if\n        // an option was set. OTOH we don't log errors w/ the original\n        // query. See https://github.com/apollostack/react-apollo/issues/404\n        .catch(() => {});\n    }\n  }\n\n  // Setup a subscription to watch for Apollo Client `ObservableQuery` changes.\n  // When new data is received, and it doesn't match the data that was used\n  // during the last `QueryData.execute` call (and ultimately the last query\n  // component render), trigger the `onNewData` callback. If not specified,\n  // `onNewData` will fallback to the default `QueryData.onNewData` function\n  // (which usually leads to a query component re-render).\n  private startQuerySubscription(onNewData: () => void = this.onNewData) {\n    if (this.currentSubscription || this.getOptions().skip) return;\n\n    this.currentSubscription = this.currentObservable!.subscribe({\n      next: ({ loading, networkStatus, data }) => {\n        const previousResult = this.previous.result;\n\n        // Make sure we're not attempting to re-render similar results\n        if (\n          previousResult &&\n          previousResult.loading === loading &&\n          previousResult.networkStatus === networkStatus &&\n          equal(previousResult.data, data)\n        ) {\n          return;\n        }\n\n        onNewData();\n      },\n      error: error => {\n        this.resubscribeToQuery();\n        if (!error.hasOwnProperty('graphQLErrors')) throw error;\n\n        const previousResult = this.previous.result;\n        if (\n          (previousResult && previousResult.loading) ||\n          !equal(error, this.previous.error)\n        ) {\n          this.previous.error = error;\n          onNewData();\n        }\n      }\n    });\n  }\n\n  private resubscribeToQuery() {\n    this.removeQuerySubscription();\n\n    // Unfortunately, if `lastError` is set in the current\n    // `observableQuery` when the subscription is re-created,\n    // the subscription will immediately receive the error, which will\n    // cause it to terminate again. To avoid this, we first clear\n    // the last error/result from the `observableQuery` before re-starting\n    // the subscription, and restore it afterwards (so the subscription\n    // has a chance to stay open).\n    const { currentObservable } = this;\n    if (currentObservable) {\n      const last = currentObservable[\"last\"];\n      try {\n        currentObservable.resetLastResults();\n        this.startQuerySubscription();\n      } finally {\n        currentObservable[\"last\"] = last;\n      }\n    }\n  }\n\n  private getExecuteResult(): QueryResult<TData, TVariables> {\n    let result = this.observableQueryFields() as QueryResult<TData, TVariables>;\n    const options = this.getOptions();\n\n    // When skipping a query (ie. we're not querying for data but still want\n    // to render children), make sure the `data` is cleared out and\n    // `loading` is set to `false` (since we aren't loading anything).\n    //\n    // NOTE: We no longer think this is the correct behavior. Skipping should\n    // not automatically set `data` to `undefined`, but instead leave the\n    // previous data in place. In other words, skipping should not mandate\n    // that previously received data is all of a sudden removed. Unfortunately,\n    // changing this is breaking, so we'll have to wait until Apollo Client\n    // 4.0 to address this.\n    if (options.skip) {\n      result = {\n        ...result,\n        data: undefined,\n        error: undefined,\n        loading: false,\n        networkStatus: NetworkStatus.ready,\n        called: true,\n      };\n    } else if (this.currentObservable) {\n      // Fetch the current result (if any) from the store.\n      const currentResult = this.currentObservable.getCurrentResult();\n      const { data, loading, partial, networkStatus, errors } = currentResult;\n      let { error } = currentResult;\n\n      // Until a set naming convention for networkError and graphQLErrors is\n      // decided upon, we map errors (graphQLErrors) to the error options.\n      if (errors && errors.length > 0) {\n        error = new ApolloError({ graphQLErrors: errors });\n      }\n\n      result = {\n        ...result,\n        data,\n        loading,\n        networkStatus,\n        error,\n        called: true\n      };\n\n      if (loading) {\n        // Fall through without modifying result...\n      } else if (error) {\n        Object.assign(result, {\n          data: (this.currentObservable.getLastResult() || ({} as any))\n            .data\n        });\n      } else {\n        const { fetchPolicy } = this.currentObservable.options;\n        const { partialRefetch } = options;\n        if (\n          partialRefetch &&\n          partial &&\n          (!data || Object.keys(data).length === 0) &&\n          fetchPolicy !== 'cache-only'\n        ) {\n          // When a `Query` component is mounted, and a mutation is executed\n          // that returns the same ID as the mounted `Query`, but has less\n          // fields in its result, Apollo Client's `QueryManager` returns the\n          // data as `undefined` since a hit can't be found in the cache.\n          // This can lead to application errors when the UI elements rendered by\n          // the original `Query` component are expecting certain data values to\n          // exist, and they're all of a sudden stripped away. To help avoid\n          // this we'll attempt to refetch the `Query` data.\n          Object.assign(result, {\n            loading: true,\n            networkStatus: NetworkStatus.loading\n          });\n          result.refetch();\n          return result;\n        }\n      }\n    }\n\n    result.client = this.client;\n    // Store options as this.previousOptions.\n    this.setOptions(options, true);\n\n    const previousResult = this.previous.result;\n\n    this.previous.loading =\n      previousResult && previousResult.loading || false;\n\n    // Ensure the returned result contains previousData as a separate\n    // property, to give developers the flexibility of leveraging outdated\n    // data while new data is loading from the network. Falling back to\n    // previousResult.previousData when previousResult.data is falsy here\n    // allows result.previousData to persist across multiple results.\n    result.previousData = previousResult &&\n      (previousResult.data || previousResult.previousData);\n\n    this.previous.result = result;\n\n    // Any query errors that exist are now available in `result`, so we'll\n    // remove the original errors from the `ObservableQuery` query store to\n    // make sure they aren't re-displayed on subsequent (potentially error\n    // free) requests/responses.\n    this.currentObservable && this.currentObservable.resetQueryStoreErrors();\n\n    return result;\n  }\n\n  private handleErrorOrCompleted() {\n    if (!this.currentObservable || !this.previous.result) return;\n\n    const { data, loading, error } = this.previous.result;\n\n    if (!loading) {\n      const {\n        query,\n        variables,\n        onCompleted,\n        onError,\n        skip\n      } = this.getOptions();\n\n      // No changes, so we won't call onError/onCompleted.\n      if (\n        this.previousOptions &&\n        !this.previous.loading &&\n        equal(this.previousOptions.query, query) &&\n        equal(this.previousOptions.variables, variables)\n      ) {\n        return;\n      }\n\n      if (onCompleted && !error && !skip) {\n        onCompleted(data as TData);\n      } else if (onError && error) {\n        onError(error);\n      }\n    }\n  }\n\n  private removeQuerySubscription() {\n    if (this.currentSubscription) {\n      this.currentSubscription.unsubscribe();\n      delete this.currentSubscription;\n    }\n  }\n\n  private removeObservable(andDelete: boolean) {\n    if (this.currentObservable) {\n      this.currentObservable[\"tearDownQuery\"]();\n      if (andDelete) {\n        delete this.currentObservable;\n      }\n    }\n  }\n\n  private obsRefetch = (variables?: Partial<TVariables>) =>\n    this.currentObservable?.refetch(variables);\n\n  private obsFetchMore = (\n    fetchMoreOptions: FetchMoreQueryOptions<TVariables, TData> &\n      FetchMoreOptions<TData, TVariables>\n  ) => this.currentObservable?.fetchMore(fetchMoreOptions);\n\n  private obsUpdateQuery = <TVars = TVariables>(\n    mapFn: (\n      previousQueryResult: TData,\n      options: UpdateQueryOptions<TVars>\n    ) => TData\n  ) => this.currentObservable?.updateQuery(mapFn);\n\n  private obsStartPolling = (pollInterval: number) => {\n    this.currentObservable?.startPolling(pollInterval);\n  };\n\n  private obsStopPolling = () => {\n    this.currentObservable?.stopPolling();\n  };\n\n  private obsSubscribeToMore = <\n    TSubscriptionData = TData,\n    TSubscriptionVariables = TVariables\n  >(\n    options: SubscribeToMoreOptions<\n      TData,\n      TSubscriptionVariables,\n      TSubscriptionData\n    >\n  ) => this.currentObservable?.subscribeToMore(options);\n\n  private observableQueryFields() {\n    return {\n      variables: this.currentObservable?.variables,\n      refetch: this.obsRefetch,\n      fetchMore: this.obsFetchMore,\n      updateQuery: this.obsUpdateQuery,\n      startPolling: this.obsStartPolling,\n      stopPolling: this.obsStopPolling,\n      subscribeToMore: this.obsSubscribeToMore\n    } as ObservableQueryFields<TData, TVariables>;\n  }\n}\n","import '../../../utilities/globals';\n\nimport { useContext, useEffect, useReducer, useRef } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\n\nimport {\n  QueryHookOptions,\n  QueryDataOptions,\n  QueryTuple,\n  QueryResult,\n} from '../../types/types';\nimport { QueryData } from '../../data';\nimport { useDeepMemo } from './useDeepMemo';\nimport { OperationVariables } from '../../../core';\nimport { getApolloContext } from '../../context';\nimport { useAfterFastRefresh } from './useAfterFastRefresh';\n\nexport function useBaseQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: QueryHookOptions<TData, TVariables>,\n  lazy = false\n) {\n  const context = useContext(getApolloContext());\n  const [tick, forceUpdate] = useReducer(x => x + 1, 0);\n  const updatedOptions = options ? { ...options, query } : { query };\n\n  const queryDataRef = useRef<QueryData<TData, TVariables>>();\n  const queryData = queryDataRef.current || (\n    queryDataRef.current = new QueryData<TData, TVariables>({\n      options: updatedOptions as QueryDataOptions<TData, TVariables>,\n      context,\n      onNewData() {\n        if (!queryData.ssrInitiated()) {\n          // When new data is received from the `QueryData` object, we want to\n          // force a re-render to make sure the new data is displayed. We can't\n          // force that re-render if we're already rendering however so to be\n          // safe we'll trigger the re-render in a microtask. In case the\n          // component gets unmounted before this callback fires, we re-check\n          // queryDataRef.current.isMounted before calling forceUpdate().\n          Promise.resolve().then(() => queryDataRef.current && queryDataRef.current.isMounted && forceUpdate());\n        } else {\n          // If we're rendering on the server side we can force an update at\n          // any point.\n          forceUpdate();\n        }\n      }\n    })\n  );\n\n  queryData.setOptions(updatedOptions);\n  queryData.context = context;\n\n  // `onError` and `onCompleted` callback functions will not always have a\n  // stable identity, so we'll exclude them from the memoization key to\n  // prevent `afterExecute` from being triggered un-necessarily.\n  const memo = {\n    options: {\n      ...updatedOptions,\n      onError: void 0,\n      onCompleted: void 0\n    } as QueryHookOptions<TData, TVariables>,\n    context,\n    tick\n  };\n\n  const result = useDeepMemo(\n    () => (lazy ? queryData.executeLazy() : queryData.execute()),\n    memo\n  );\n\n  const queryResult = lazy\n    ? (result as QueryTuple<TData, TVariables>)[1]\n    : (result as QueryResult<TData, TVariables>);\n\n  if (__DEV__) {\n    // ensure we run an update after refreshing so that we reinitialize\n    useAfterFastRefresh(forceUpdate);\n  }\n\n  useEffect(() => {\n    return () => {\n      queryData.cleanup();\n      // this effect can run multiple times during a fast-refresh\n      // so make sure we clean up the ref\n      queryDataRef.current = void 0;\n    }\n  }, []);\n\n  useEffect(() => queryData.afterExecute({ lazy }), [\n    queryResult.loading,\n    queryResult.networkStatus,\n    queryResult.error,\n    queryResult.data,\n    queryData.currentObservable,\n  ]);\n\n  return result;\n}\n","import { useRef } from 'react';\nimport { equal } from '@wry/equality';\n\n/**\n * Memoize a result using deep equality. This hook has two advantages over\n * React.useMemo: it uses deep equality to compare memo keys, and it guarantees\n * that the memo function will only be called if the keys are unequal.\n * React.useMemo cannot be relied on to do this, since it is only a performance\n * optimization (see https://reactjs.org/docs/hooks-reference.html#usememo).\n */\nexport function useDeepMemo<TKey, TValue>(\n  memoFn: () => TValue,\n  key: TKey\n): TValue {\n  const ref = useRef<{ key: TKey; value: TValue }>();\n\n  if (!ref.current || !equal(key, ref.current.key)) {\n    ref.current = { key, value: memoFn() };\n  }\n\n  return ref.current.value;\n}\n","import '../../../utilities/globals';\nimport { useEffect, useRef } from \"react\";\n\n/**\n * This hook allows running a function only immediately after a react\n * fast refresh or live reload.\n *\n * Useful in order to ensure that we can reinitialize things that have been\n * disposed by cleanup functions in `useEffect`.\n * @param effectFn a function to run immediately after a fast refresh\n */\nexport function useAfterFastRefresh(effectFn: () => unknown) {\n  if (__DEV__) {\n    const didRefresh = useRef(false);\n    useEffect(() => {\n      return () => {\n        // Detect fast refresh, only runs multiple times in fast refresh\n        didRefresh.current = true;\n      };\n    }, []);\n\n    useEffect(() => {\n      if (didRefresh.current === true) {\n        // This block only runs after a fast refresh\n        didRefresh.current = false;\n        effectFn();\n      }\n    }, [])\n  }\n}\n","// This icon file is generated automatically.\nvar CheckOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M912 190h-69.9c-9.8 0-19.1 4.5-25.1 12.2L404.7 724.5 207 474a32 32 0 00-25.1-12.2H112c-6.7 0-10.4 7.7-6.3 12.9l273.9 347c12.8 16.2 37.4 16.2 50.3 0l488.4-618.9c4.1-5.1.4-12.8-6.3-12.8z\" } }] }, \"name\": \"check\", \"theme\": \"outlined\" };\nexport default CheckOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport CheckOutlinedSvg from \"@ant-design/icons-svg/es/asn/CheckOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar CheckOutlined = function CheckOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: CheckOutlinedSvg\n  }));\n};\n\nCheckOutlined.displayName = 'CheckOutlined';\nexport default /*#__PURE__*/React.forwardRef(CheckOutlined);","import { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\n\nimport { QueryHookOptions, QueryResult } from '../types/types';\nimport { useBaseQuery } from './utils/useBaseQuery';\nimport { OperationVariables } from '../../core';\n\nexport function useQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: QueryHookOptions<TData, TVariables>\n) {\n  return useBaseQuery<TData, TVariables>(query, options, false) as QueryResult<\n    TData,\n    TVariables\n  >;\n}\n","import { equal } from '@wry/equality';\n\nimport { DocumentType } from '../parser';\nimport { ApolloError } from '../../errors';\nimport {\n  MutationDataOptions,\n  MutationTuple,\n  MutationFunctionOptions,\n  MutationResult,\n} from '../types/types';\nimport { OperationData } from './OperationData';\nimport { MutationOptions, mergeOptions, ApolloCache, OperationVariables, DefaultContext } from '../../core';\nimport { FetchResult } from '../../link/core';\n\ntype MutationResultWithoutClient<TData = any> = Omit<MutationResult<TData>, 'client'>;\n\nexport class MutationData<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n> extends OperationData<MutationDataOptions<TData, TVariables, TContext, TCache>> {\n  private mostRecentMutationId: number;\n  private result: MutationResultWithoutClient<TData>;\n  private previousResult?: MutationResultWithoutClient<TData>;\n  private setResult: (result: MutationResultWithoutClient<TData>) => any;\n\n  constructor({\n    options,\n    context,\n    result,\n    setResult\n  }: {\n    options: MutationDataOptions<TData, TVariables, TContext, TCache>;\n    context: any;\n    result: MutationResultWithoutClient<TData>;\n    setResult: (result: MutationResultWithoutClient<TData>) => any;\n  }) {\n    super(options, context);\n    this.verifyDocumentType(options.mutation, DocumentType.Mutation);\n    this.result = result;\n    this.setResult = setResult;\n    this.mostRecentMutationId = 0;\n  }\n\n  public execute(result: MutationResultWithoutClient<TData>): MutationTuple<TData, TVariables, TContext, TCache> {\n    this.isMounted = true;\n    this.verifyDocumentType(this.getOptions().mutation, DocumentType.Mutation);\n    return [\n      this.runMutation,\n      { ...result, client: this.refreshClient().client }\n    ] as MutationTuple<TData, TVariables, TContext, TCache>;\n  }\n\n  public afterExecute() {\n    this.isMounted = true;\n    return this.unmount.bind(this);\n  }\n\n  public cleanup() {\n    // No cleanup required.\n  }\n\n  private runMutation = (\n    mutationFunctionOptions: MutationFunctionOptions<\n      TData,\n      TVariables,\n      TContext,\n      TCache\n    > = {} as MutationFunctionOptions<TData, TVariables, TContext, TCache>\n  ) => {\n    this.onMutationStart();\n    const mutationId = this.generateNewMutationId();\n\n    return this.mutate(mutationFunctionOptions)\n      .then((response: FetchResult<TData>) => {\n        this.onMutationCompleted(response, mutationId);\n        return response;\n      })\n      .catch((error: ApolloError) => {\n        const { onError } = this.getOptions();\n        this.onMutationError(error, mutationId);\n        if (onError) {\n          onError(error);\n          return {\n            data: undefined,\n            errors: error,\n          };\n        } else {\n          throw error;\n        }\n      });\n  };\n\n  private mutate(\n    options: MutationFunctionOptions<TData, TVariables, TContext, TCache>\n  ) {\n    return this.refreshClient().client.mutate(\n      mergeOptions(\n        this.getOptions(),\n        options as MutationOptions<TData, TVariables, TContext>,\n      ),\n    );\n  }\n\n  private onMutationStart() {\n    if (!this.result.loading && !this.getOptions().ignoreResults) {\n      this.updateResult({\n        loading: true,\n        error: undefined,\n        data: undefined,\n        called: true\n      });\n    }\n  }\n\n  private onMutationCompleted(\n    response: FetchResult<TData>,\n    mutationId: number\n  ) {\n    const { onCompleted, ignoreResults } = this.getOptions();\n\n    const { data, errors } = response;\n    const error =\n      errors && errors.length > 0\n        ? new ApolloError({ graphQLErrors: errors })\n        : undefined;\n\n    const callOncomplete = () =>\n      onCompleted ? onCompleted(data as TData) : null;\n\n    if (this.isMostRecentMutation(mutationId) && !ignoreResults) {\n      this.updateResult({\n        called: true,\n        loading: false,\n        data,\n        error\n      });\n    }\n    callOncomplete();\n  }\n\n  private onMutationError(error: ApolloError, mutationId: number) {\n    if (this.isMostRecentMutation(mutationId)) {\n      this.updateResult({\n        loading: false,\n        error,\n        data: undefined,\n        called: true\n      });\n    }\n  }\n\n  private generateNewMutationId(): number {\n    return ++this.mostRecentMutationId;\n  }\n\n  private isMostRecentMutation(mutationId: number) {\n    return this.mostRecentMutationId === mutationId;\n  }\n\n  private updateResult(result: MutationResultWithoutClient<TData>): MutationResultWithoutClient<TData> | undefined {\n    if (\n      this.isMounted &&\n      (!this.previousResult || !equal(this.previousResult, result))\n    ) {\n      this.setResult(result);\n      this.previousResult = result;\n      return result;\n    }\n  }\n}\n","import { useContext, useState, useRef, useEffect } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\n\nimport { MutationHookOptions, MutationTuple } from '../types/types';\nimport { MutationData } from '../data';\nimport { ApolloCache, DefaultContext, OperationVariables } from '../../core';\nimport { getApolloContext } from '../context';\n\nexport function useMutation<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n>(\n  mutation: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: MutationHookOptions<TData, TVariables, TContext>\n): MutationTuple<TData, TVariables, TContext, TCache> {\n  const context = useContext(getApolloContext());\n  const [result, setResult] = useState({ called: false, loading: false });\n  const updatedOptions = options ? { ...options, mutation } : { mutation };\n\n  const mutationDataRef = useRef<MutationData<TData, TVariables, TContext>>();\n  function getMutationDataRef() {\n    if (!mutationDataRef.current) {\n      mutationDataRef.current = new MutationData<TData, TVariables, TContext>({\n        options: updatedOptions,\n        context,\n        result,\n        setResult\n      });\n    }\n    return mutationDataRef.current;\n  }\n\n  const mutationData = getMutationDataRef();\n  mutationData.setOptions(updatedOptions);\n  mutationData.context = context;\n\n  useEffect(() => mutationData.afterExecute());\n\n  return mutationData.execute(result);\n}\n","// This icon file is generated automatically.\nvar EditOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M257.7 752c2 0 4-.2 6-.5L431.9 722c2-.4 3.9-1.3 5.3-2.8l423.9-423.9a9.96 9.96 0 000-14.1L694.9 114.9c-1.9-1.9-4.4-2.9-7.1-2.9s-5.2 1-7.1 2.9L256.8 538.8c-1.5 1.5-2.4 3.3-2.8 5.3l-29.5 168.2a33.5 33.5 0 009.4 29.8c6.6 6.4 14.9 9.9 23.8 9.9zm67.4-174.4L687.8 215l73.3 73.3-362.7 362.6-88.9 15.7 15.6-89zM880 836H144c-17.7 0-32 14.3-32 32v36c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-36c0-17.7-14.3-32-32-32z\" } }] }, \"name\": \"edit\", \"theme\": \"outlined\" };\nexport default EditOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport EditOutlinedSvg from \"@ant-design/icons-svg/es/asn/EditOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar EditOutlined = function EditOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: EditOutlinedSvg\n  }));\n};\n\nEditOutlined.displayName = 'EditOutlined';\nexport default /*#__PURE__*/React.forwardRef(EditOutlined);","// This icon file is generated automatically.\nvar DeleteOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M360 184h-8c4.4 0 8-3.6 8-8v8h304v-8c0 4.4 3.6 8 8 8h-8v72h72v-80c0-35.3-28.7-64-64-64H352c-35.3 0-64 28.7-64 64v80h72v-72zm504 72H160c-17.7 0-32 14.3-32 32v32c0 4.4 3.6 8 8 8h60.4l24.7 523c1.6 34.1 29.8 61 63.9 61h454c34.2 0 62.3-26.8 63.9-61l24.7-523H888c4.4 0 8-3.6 8-8v-32c0-17.7-14.3-32-32-32zM731.3 840H292.7l-24.2-512h487l-24.2 512z\" } }] }, \"name\": \"delete\", \"theme\": \"outlined\" };\nexport default DeleteOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport DeleteOutlinedSvg from \"@ant-design/icons-svg/es/asn/DeleteOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar DeleteOutlined = function DeleteOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: DeleteOutlinedSvg\n  }));\n};\n\nDeleteOutlined.displayName = 'DeleteOutlined';\nexport default /*#__PURE__*/React.forwardRef(DeleteOutlined);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { ConfigConsumer } from '../config-provider';\n\nvar Divider = function Divider(props) {\n  return /*#__PURE__*/React.createElement(ConfigConsumer, null, function (_ref) {\n    var _classNames;\n\n    var getPrefixCls = _ref.getPrefixCls,\n        direction = _ref.direction;\n\n    var customizePrefixCls = props.prefixCls,\n        _props$type = props.type,\n        type = _props$type === void 0 ? 'horizontal' : _props$type,\n        _props$orientation = props.orientation,\n        orientation = _props$orientation === void 0 ? 'center' : _props$orientation,\n        className = props.className,\n        children = props.children,\n        dashed = props.dashed,\n        plain = props.plain,\n        restProps = __rest(props, [\"prefixCls\", \"type\", \"orientation\", \"className\", \"children\", \"dashed\", \"plain\"]);\n\n    var prefixCls = getPrefixCls('divider', customizePrefixCls);\n    var orientationPrefix = orientation.length > 0 ? \"-\".concat(orientation) : orientation;\n    var hasChildren = !!children;\n    var classString = classNames(prefixCls, \"\".concat(prefixCls, \"-\").concat(type), (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-with-text\"), hasChildren), _defineProperty(_classNames, \"\".concat(prefixCls, \"-with-text\").concat(orientationPrefix), hasChildren), _defineProperty(_classNames, \"\".concat(prefixCls, \"-dashed\"), !!dashed), _defineProperty(_classNames, \"\".concat(prefixCls, \"-plain\"), !!plain), _defineProperty(_classNames, \"\".concat(prefixCls, \"-rtl\"), direction === 'rtl'), _classNames), className);\n    return /*#__PURE__*/React.createElement(\"div\", _extends({\n      className: classString\n    }, restProps, {\n      role: \"separator\"\n    }), children && /*#__PURE__*/React.createElement(\"span\", {\n      className: \"\".concat(prefixCls, \"-inner-text\")\n    }, children));\n  });\n};\n\nexport default Divider;","// This icon file is generated automatically.\nvar PlusOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"defs\", \"attrs\": {}, \"children\": [{ \"tag\": \"style\", \"attrs\": {} }] }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z\" } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M176 474h672q8 0 8 8v60q0 8-8 8H176q-8 0-8-8v-60q0-8 8-8z\" } }] }, \"name\": \"plus\", \"theme\": \"outlined\" };\nexport default PlusOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport PlusOutlinedSvg from \"@ant-design/icons-svg/es/asn/PlusOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar PlusOutlined = function PlusOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: PlusOutlinedSvg\n  }));\n};\n\nPlusOutlined.displayName = 'PlusOutlined';\nexport default /*#__PURE__*/React.forwardRef(PlusOutlined);"],"sourceRoot":""}