{"version":3,"sources":["queries/adminQuery.ts","../../../../src/react/data/QueryData.ts","../../../../../src/react/hooks/utils/useBaseQuery.ts","../../../../../src/react/hooks/utils/useDeepMemo.ts","../../../../../src/react/hooks/utils/useAfterFastRefresh.ts","utils/convertDate.ts","../node_modules/antd/es/space/Item.js","../node_modules/antd/es/space/index.js","pages/Admin/StoragePage/styles.tsx","pages/Admin/StoragePage/index.tsx","../../../../src/react/hooks/useLazyQuery.ts"],"names":["CREATE_BOARD","gql","GET_BOARD_BY_CATEGORY","DELETE_BOARD","EDIT_BOARD","DELETE_FILE","DELETE_IMAGE","CREATE_FILE","CREATE_IMAGE","CREATE_LINK","DELETE_LINK","EDIT_LINK","options","context","onNewData","runLazy","previous","Object","create","runLazyQuery","cleanup","lazyOptions","obsRefetch","variables","currentObservable","refetch","obsFetchMore","fetchMoreOptions","fetchMore","obsUpdateQuery","mapFn","updateQuery","obsStartPolling","pollInterval","startPolling","obsStopPolling","stopPolling","obsSubscribeToMore","subscribeToMore","execute","this","refreshClient","getOptions","skip","query","removeQuerySubscription","removeObservable","updateObservableQuery","getExecuteSsrResult","getExecuteResult","executeLazy","loading","networkStatus","ready","called","data","undefined","fetchData","ssr","Promise","resolve","startQuerySubscription","afterExecute","lazy","isMounted","ssrInitiated","handleErrorOrCompleted","previousOptions","unmount","bind","result","renderPromises","ssrDisabled","fetchDisabled","client","disableNetworkFetches","ssrLoading","stale","observableQueryFields","addQueryPromise","prepareObservableQueryOptions","verifyDocumentType","Query","displayName","fetchPolicy","initializeObservableQuery","getSSRObservable","observableQueryOptions","children","watchQuery","registerSSRObservable","newObservableQueryOptions","setOptions","catch","currentSubscription","subscribe","next","previousResult","error","resubscribeToQuery","hasOwnProperty","last","resetLastResults","currentResult","getCurrentResult","partial","errors","length","graphQLErrors","assign","getLastResult","keys","previousData","resetQueryStoreErrors","onCompleted","onError","unsubscribe","andDelete","useBaseQuery","x","tick","forceUpdate","updatedOptions","queryDataRef","queryData","current","then","memoFn","key","ref","value","useDeepMemo","queryResult","__DEV__","effectFn","useAfterFastRefresh","getDate","time","itemDate","Date","Math","floor","parseInt","getFullYear","getMonth","Item","_ref","className","direction","index","marginDirection","split","wrap","_React$useContext","React","SpaceContext","horizontalSize","verticalSize","latestIndex","style","supportFlexGap","marginBottom","_extends","_defineProperty","paddingBottom","concat","__rest","s","e","t","p","prototype","call","indexOf","getOwnPropertySymbols","i","propertyIsEnumerable","spaceSize","small","middle","large","Space","props","_classNames","ConfigContext","getPrefixCls","space","directionConfig","_props$size","size","align","_props$direction","customizePrefixCls","prefixCls","_props$wrap","otherProps","useFlexGapSupport","_React$useMemo","Array","isArray","map","item","getNumberSize","_React$useMemo2","_slicedToArray","childNodes","toArray","keepEmpty","mergedAlign","cn","classNames","itemClassName","nodes","child","spaceContext","gapStyle","flexWrap","columnGap","rowGap","Provider","Container","styled","div","StoragePage","useParams","param","subparam","state","useLocation","useState","boards","setBoards","getBoard","useMutation","deleteBoard","ok","err","toast","success","useEffect","category","excuteRefetch","refresh","getBoardByCategory","res","dataSource","elem","obj","id","title","createdAt","push","to","type","marginTop","rowKey","dataIndex","width","ellipsis","render","text","record","danger","onClick"],"mappings":"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","file":"static/js/21.1fe47a9a.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\n\nexport const CREATE_BOARD = gql`\n  mutation createBoard(\n    $title: String\n    $content: String\n    $category: String!\n    $files: [AttachModel]\n    $images: [AttachModel]\n    $link: String\n  ) {\n    createBoard(\n      title: $title\n      content: $content\n      category: $category\n      files: $files\n      images: $images\n      link: $link\n    ) {\n      ok\n      err\n    }\n  }\n`;\n\nexport const GET_BOARD_BY_CATEGORY = gql`\n  query getBoardByCategory($category: String!) {\n    getBoardByCategory(category: $category) {\n      ok\n      err\n      data {\n        id\n        title\n        content\n        category\n        files {\n          id\n          url\n          fileName\n        }\n        images {\n          id\n          url\n          fileName\n        }\n        link\n        createdAt\n        updatedAt\n        deleteAt\n      }\n    }\n  }\n`;\n\nexport const DELETE_BOARD = gql`\n  mutation deleteBoard($id: Int!) {\n    deleteBoard(id: $id) {\n      ok\n      err\n    }\n  }\n`;\n\nexport const EDIT_BOARD = gql`\n  mutation editBoard(\n    $id: Int!\n    $title: String\n    $content: String\n    $link: String\n  ) {\n    editBoard(id: $id, title: $title, content: $content, link: $link) {\n      ok\n      err\n    }\n  }\n`;\n\nexport const EDIT_FILE = gql`\n  mutation editFile($id: Int!, $url: String!, $fileName: String!) {\n    editFile(id: $id, url: $url, fileName: $fileName) {\n      ok\n      err\n    }\n  }\n`;\n\nexport const EDIT_IMAGE = gql`\n  mutation editImage($id: Int!, $url: String!, $fileName: String!) {\n    editImage(id: $id, url: $url, fileName: $fileName) {\n      ok\n      err\n    }\n  }\n`;\n\nexport const DELETE_FILE = gql`\n  mutation deleteFile($id: Int!) {\n    deleteFile(id: $id) {\n      ok\n      err\n    }\n  }\n`;\n\nexport const DELETE_IMAGE = gql`\n  mutation deleteImage($id: Int!) {\n    deleteImage(id: $id) {\n      ok\n      err\n    }\n  }\n`;\n\nexport const CREATE_FILE = gql`\n  mutation createFile($url: String!, $fileName: String!, $boardId: Int!) {\n    createFile(url: $url, fileName: $fileName, boardId: $boardId) {\n      ok\n      err\n    }\n  }\n`;\n\nexport const CREATE_IMAGE = gql`\n  mutation createImage($url: String!, $fileName: String!, $boardId: Int!) {\n    createImage(url: $url, fileName: $fileName, boardId: $boardId) {\n      ok\n      err\n    }\n  }\n`;\n\nexport const CREATE_LINK = gql`\n  mutation createLink($title: String!, $url: String!) {\n    createLink(title: $title, url: $url) {\n      ok\n      err\n    }\n  }\n`;\n\nexport const DELETE_LINK = gql`\n  mutation deleteLink($id: Int!) {\n    deleteLink(id: $id) {\n      ok\n      err\n    }\n  }\n`;\n\nexport const EDIT_LINK = gql`\n  mutation editLink($id: Int!, $title: String, $url: String) {\n    editLink(id: $id, title: $title, url: $url) {\n      ok\n      err\n    }\n  }\n`;\n","import { equal } from '@wry/equality';\n\nimport { ApolloError } from '../../errors';\n\nimport {\n  ApolloClient,\n  NetworkStatus,\n  FetchMoreQueryOptions,\n  SubscribeToMoreOptions,\n  ObservableQuery,\n  FetchMoreOptions,\n  UpdateQueryOptions,\n  DocumentNode,\n  TypedDocumentNode,\n} from '../../core';\n\nimport {\n  ObservableSubscription\n} from '../../utilities';\n\nimport { DocumentType } from '../parser';\nimport {\n  QueryResult,\n  QueryDataOptions,\n  QueryTuple,\n  QueryLazyOptions,\n  ObservableQueryFields,\n} from '../types/types';\nimport { OperationData } from './OperationData';\n\ntype ObservableQueryOptions<TData, TVars> =\n  ReturnType<QueryData<TData, TVars>[\"prepareObservableQueryOptions\"]>;\n\nexport class QueryData<TData, TVariables> extends OperationData<\n  QueryDataOptions<TData, TVariables>\n> {\n  public onNewData: () => void;\n  public currentObservable?: ObservableQuery<TData, TVariables>;\n  private currentSubscription?: ObservableSubscription;\n  private runLazy: boolean = false;\n  private lazyOptions?: QueryLazyOptions<TVariables>;\n  private previous: {\n    client?: ApolloClient<object>;\n    query?: DocumentNode | TypedDocumentNode<TData, TVariables>;\n    observableQueryOptions?: ObservableQueryOptions<TData, TVariables>;\n    result?: QueryResult<TData, TVariables>;\n    loading?: boolean;\n    options?: QueryDataOptions<TData, TVariables>;\n    error?: ApolloError;\n  } = Object.create(null);\n\n  constructor({\n    options,\n    context,\n    onNewData\n  }: {\n    options: QueryDataOptions<TData, TVariables>;\n    context: any;\n    onNewData: () => void;\n  }) {\n    super(options, context);\n    this.onNewData = onNewData;\n  }\n\n  public execute(): QueryResult<TData, TVariables> {\n    this.refreshClient();\n\n    const { skip, query } = this.getOptions();\n    if (skip || query !== this.previous.query) {\n      this.removeQuerySubscription();\n      this.removeObservable(!skip);\n      this.previous.query = query;\n    }\n\n    this.updateObservableQuery();\n\n    return this.getExecuteSsrResult() || this.getExecuteResult();\n  }\n\n  public executeLazy(): QueryTuple<TData, TVariables> {\n    return !this.runLazy\n      ? [\n          this.runLazyQuery,\n          {\n            loading: false,\n            networkStatus: NetworkStatus.ready,\n            called: false,\n            data: undefined\n          }\n        ]\n      : [this.runLazyQuery, this.execute()];\n  }\n\n  // For server-side rendering\n  public fetchData(): Promise<void> | boolean {\n    const options = this.getOptions();\n    if (options.skip || options.ssr === false) return false;\n    return new Promise(resolve => this.startQuerySubscription(resolve));\n  }\n\n  public afterExecute({ lazy = false }: { lazy?: boolean } = {}) {\n    this.isMounted = true;\n    const options = this.getOptions();\n    if (this.currentObservable && !this.ssrInitiated()) {\n      this.startQuerySubscription();\n    }\n\n    if (!lazy || this.runLazy) {\n      this.handleErrorOrCompleted();\n    }\n\n    this.previousOptions = options;\n    return this.unmount.bind(this);\n  }\n\n  public cleanup() {\n    this.removeQuerySubscription();\n    this.removeObservable(true);\n    delete this.previous.result;\n  }\n\n  public getOptions() {\n    const options = super.getOptions();\n\n    if (this.lazyOptions) {\n      options.variables = {\n        ...options.variables,\n        ...this.lazyOptions.variables\n      } as TVariables;\n      options.context = {\n        ...options.context,\n        ...this.lazyOptions.context\n      };\n    }\n\n    // skip is not supported when using lazy query execution.\n    if (this.runLazy) {\n      delete options.skip;\n    }\n\n    return options;\n  }\n\n  public ssrInitiated() {\n    return this.context && this.context.renderPromises;\n  }\n\n  private runLazyQuery = (options?: QueryLazyOptions<TVariables>) => {\n    this.cleanup();\n    this.runLazy = true;\n    this.lazyOptions = options;\n    this.onNewData();\n  };\n\n  private getExecuteSsrResult() {\n    const { ssr, skip } = this.getOptions();\n    const ssrDisabled = ssr === false;\n    const fetchDisabled = this.refreshClient().client.disableNetworkFetches;\n\n    const ssrLoading = {\n      loading: true,\n      networkStatus: NetworkStatus.loading,\n      called: true,\n      data: undefined,\n      stale: false,\n      client: this.client,\n      ...this.observableQueryFields(),\n    } as QueryResult<TData, TVariables>;\n\n    // If SSR has been explicitly disabled, and this function has been called\n    // on the server side, return the default loading state.\n    if (ssrDisabled && (this.ssrInitiated() || fetchDisabled)) {\n      this.previous.result = ssrLoading;\n      return ssrLoading;\n    }\n\n    if (this.ssrInitiated()) {\n      const result = this.getExecuteResult() || ssrLoading;\n      if (result.loading && !skip) {\n        this.context.renderPromises!.addQueryPromise(this, () => null);\n      }\n      return result;\n    }\n  }\n\n  private prepareObservableQueryOptions() {\n    const options = this.getOptions();\n    this.verifyDocumentType(options.query, DocumentType.Query);\n    const displayName = options.displayName || 'Query';\n\n    // Set the fetchPolicy to cache-first for network-only and cache-and-network\n    // fetches for server side renders.\n    if (\n      this.ssrInitiated() &&\n      (options.fetchPolicy === 'network-only' ||\n        options.fetchPolicy === 'cache-and-network')\n    ) {\n      options.fetchPolicy = 'cache-first';\n    }\n\n    return {\n      ...options,\n      displayName,\n      context: options.context,\n    };\n  }\n\n  private initializeObservableQuery() {\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    if (this.ssrInitiated()) {\n      this.currentObservable = this.context!.renderPromises!.getSSRObservable(\n        this.getOptions()\n      );\n    }\n\n    if (!this.currentObservable) {\n      const observableQueryOptions = this.prepareObservableQueryOptions();\n\n      this.previous.observableQueryOptions = {\n        ...observableQueryOptions,\n        children: void 0,\n      };\n      this.currentObservable = this.refreshClient().client.watchQuery({\n        ...observableQueryOptions\n      });\n\n      if (this.ssrInitiated()) {\n        this.context!.renderPromises!.registerSSRObservable(\n          this.currentObservable,\n          observableQueryOptions\n        );\n      }\n    }\n  }\n\n  private updateObservableQuery() {\n    // If we skipped initially, we may not have yet created the observable\n    if (!this.currentObservable) {\n      this.initializeObservableQuery();\n      return;\n    }\n\n    const newObservableQueryOptions = {\n      ...this.prepareObservableQueryOptions(),\n      children: void 0,\n    };\n\n    if (this.getOptions().skip) {\n      this.previous.observableQueryOptions = newObservableQueryOptions;\n      return;\n    }\n\n    if (\n      !equal(newObservableQueryOptions, this.previous.observableQueryOptions)\n    ) {\n      this.previous.observableQueryOptions = newObservableQueryOptions;\n      this.currentObservable\n        .setOptions(newObservableQueryOptions)\n        // The error will be passed to the child container, so we don't\n        // need to log it here. We could conceivably log something if\n        // an option was set. OTOH we don't log errors w/ the original\n        // query. See https://github.com/apollostack/react-apollo/issues/404\n        .catch(() => {});\n    }\n  }\n\n  // Setup a subscription to watch for Apollo Client `ObservableQuery` changes.\n  // When new data is received, and it doesn't match the data that was used\n  // during the last `QueryData.execute` call (and ultimately the last query\n  // component render), trigger the `onNewData` callback. If not specified,\n  // `onNewData` will fallback to the default `QueryData.onNewData` function\n  // (which usually leads to a query component re-render).\n  private startQuerySubscription(onNewData: () => void = this.onNewData) {\n    if (this.currentSubscription || this.getOptions().skip) return;\n\n    this.currentSubscription = this.currentObservable!.subscribe({\n      next: ({ loading, networkStatus, data }) => {\n        const previousResult = this.previous.result;\n\n        // Make sure we're not attempting to re-render similar results\n        if (\n          previousResult &&\n          previousResult.loading === loading &&\n          previousResult.networkStatus === networkStatus &&\n          equal(previousResult.data, data)\n        ) {\n          return;\n        }\n\n        onNewData();\n      },\n      error: error => {\n        this.resubscribeToQuery();\n        if (!error.hasOwnProperty('graphQLErrors')) throw error;\n\n        const previousResult = this.previous.result;\n        if (\n          (previousResult && previousResult.loading) ||\n          !equal(error, this.previous.error)\n        ) {\n          this.previous.error = error;\n          onNewData();\n        }\n      }\n    });\n  }\n\n  private resubscribeToQuery() {\n    this.removeQuerySubscription();\n\n    // Unfortunately, if `lastError` is set in the current\n    // `observableQuery` when the subscription is re-created,\n    // the subscription will immediately receive the error, which will\n    // cause it to terminate again. To avoid this, we first clear\n    // the last error/result from the `observableQuery` before re-starting\n    // the subscription, and restore it afterwards (so the subscription\n    // has a chance to stay open).\n    const { currentObservable } = this;\n    if (currentObservable) {\n      const last = currentObservable[\"last\"];\n      try {\n        currentObservable.resetLastResults();\n        this.startQuerySubscription();\n      } finally {\n        currentObservable[\"last\"] = last;\n      }\n    }\n  }\n\n  private getExecuteResult(): QueryResult<TData, TVariables> {\n    let result = this.observableQueryFields() as QueryResult<TData, TVariables>;\n    const options = this.getOptions();\n\n    // When skipping a query (ie. we're not querying for data but still want\n    // to render children), make sure the `data` is cleared out and\n    // `loading` is set to `false` (since we aren't loading anything).\n    //\n    // NOTE: We no longer think this is the correct behavior. Skipping should\n    // not automatically set `data` to `undefined`, but instead leave the\n    // previous data in place. In other words, skipping should not mandate\n    // that previously received data is all of a sudden removed. Unfortunately,\n    // changing this is breaking, so we'll have to wait until Apollo Client\n    // 4.0 to address this.\n    if (options.skip) {\n      result = {\n        ...result,\n        data: undefined,\n        error: undefined,\n        loading: false,\n        networkStatus: NetworkStatus.ready,\n        called: true,\n      };\n    } else if (this.currentObservable) {\n      // Fetch the current result (if any) from the store.\n      const currentResult = this.currentObservable.getCurrentResult();\n      const { data, loading, partial, networkStatus, errors } = currentResult;\n      let { error } = currentResult;\n\n      // Until a set naming convention for networkError and graphQLErrors is\n      // decided upon, we map errors (graphQLErrors) to the error options.\n      if (errors && errors.length > 0) {\n        error = new ApolloError({ graphQLErrors: errors });\n      }\n\n      result = {\n        ...result,\n        data,\n        loading,\n        networkStatus,\n        error,\n        called: true\n      };\n\n      if (loading) {\n        // Fall through without modifying result...\n      } else if (error) {\n        Object.assign(result, {\n          data: (this.currentObservable.getLastResult() || ({} as any))\n            .data\n        });\n      } else {\n        const { fetchPolicy } = this.currentObservable.options;\n        const { partialRefetch } = options;\n        if (\n          partialRefetch &&\n          partial &&\n          (!data || Object.keys(data).length === 0) &&\n          fetchPolicy !== 'cache-only'\n        ) {\n          // When a `Query` component is mounted, and a mutation is executed\n          // that returns the same ID as the mounted `Query`, but has less\n          // fields in its result, Apollo Client's `QueryManager` returns the\n          // data as `undefined` since a hit can't be found in the cache.\n          // This can lead to application errors when the UI elements rendered by\n          // the original `Query` component are expecting certain data values to\n          // exist, and they're all of a sudden stripped away. To help avoid\n          // this we'll attempt to refetch the `Query` data.\n          Object.assign(result, {\n            loading: true,\n            networkStatus: NetworkStatus.loading\n          });\n          result.refetch();\n          return result;\n        }\n      }\n    }\n\n    result.client = this.client;\n    // Store options as this.previousOptions.\n    this.setOptions(options, true);\n\n    const previousResult = this.previous.result;\n\n    this.previous.loading =\n      previousResult && previousResult.loading || false;\n\n    // Ensure the returned result contains previousData as a separate\n    // property, to give developers the flexibility of leveraging outdated\n    // data while new data is loading from the network. Falling back to\n    // previousResult.previousData when previousResult.data is falsy here\n    // allows result.previousData to persist across multiple results.\n    result.previousData = previousResult &&\n      (previousResult.data || previousResult.previousData);\n\n    this.previous.result = result;\n\n    // Any query errors that exist are now available in `result`, so we'll\n    // remove the original errors from the `ObservableQuery` query store to\n    // make sure they aren't re-displayed on subsequent (potentially error\n    // free) requests/responses.\n    this.currentObservable && this.currentObservable.resetQueryStoreErrors();\n\n    return result;\n  }\n\n  private handleErrorOrCompleted() {\n    if (!this.currentObservable || !this.previous.result) return;\n\n    const { data, loading, error } = this.previous.result;\n\n    if (!loading) {\n      const {\n        query,\n        variables,\n        onCompleted,\n        onError,\n        skip\n      } = this.getOptions();\n\n      // No changes, so we won't call onError/onCompleted.\n      if (\n        this.previousOptions &&\n        !this.previous.loading &&\n        equal(this.previousOptions.query, query) &&\n        equal(this.previousOptions.variables, variables)\n      ) {\n        return;\n      }\n\n      if (onCompleted && !error && !skip) {\n        onCompleted(data as TData);\n      } else if (onError && error) {\n        onError(error);\n      }\n    }\n  }\n\n  private removeQuerySubscription() {\n    if (this.currentSubscription) {\n      this.currentSubscription.unsubscribe();\n      delete this.currentSubscription;\n    }\n  }\n\n  private removeObservable(andDelete: boolean) {\n    if (this.currentObservable) {\n      this.currentObservable[\"tearDownQuery\"]();\n      if (andDelete) {\n        delete this.currentObservable;\n      }\n    }\n  }\n\n  private obsRefetch = (variables?: Partial<TVariables>) =>\n    this.currentObservable?.refetch(variables);\n\n  private obsFetchMore = (\n    fetchMoreOptions: FetchMoreQueryOptions<TVariables, TData> &\n      FetchMoreOptions<TData, TVariables>\n  ) => this.currentObservable?.fetchMore(fetchMoreOptions);\n\n  private obsUpdateQuery = <TVars = TVariables>(\n    mapFn: (\n      previousQueryResult: TData,\n      options: UpdateQueryOptions<TVars>\n    ) => TData\n  ) => this.currentObservable?.updateQuery(mapFn);\n\n  private obsStartPolling = (pollInterval: number) => {\n    this.currentObservable?.startPolling(pollInterval);\n  };\n\n  private obsStopPolling = () => {\n    this.currentObservable?.stopPolling();\n  };\n\n  private obsSubscribeToMore = <\n    TSubscriptionData = TData,\n    TSubscriptionVariables = TVariables\n  >(\n    options: SubscribeToMoreOptions<\n      TData,\n      TSubscriptionVariables,\n      TSubscriptionData\n    >\n  ) => this.currentObservable?.subscribeToMore(options);\n\n  private observableQueryFields() {\n    return {\n      variables: this.currentObservable?.variables,\n      refetch: this.obsRefetch,\n      fetchMore: this.obsFetchMore,\n      updateQuery: this.obsUpdateQuery,\n      startPolling: this.obsStartPolling,\n      stopPolling: this.obsStopPolling,\n      subscribeToMore: this.obsSubscribeToMore\n    } as ObservableQueryFields<TData, TVariables>;\n  }\n}\n","import '../../../utilities/globals';\n\nimport { useContext, useEffect, useReducer, useRef } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\n\nimport {\n  QueryHookOptions,\n  QueryDataOptions,\n  QueryTuple,\n  QueryResult,\n} from '../../types/types';\nimport { QueryData } from '../../data';\nimport { useDeepMemo } from './useDeepMemo';\nimport { OperationVariables } from '../../../core';\nimport { getApolloContext } from '../../context';\nimport { useAfterFastRefresh } from './useAfterFastRefresh';\n\nexport function useBaseQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: QueryHookOptions<TData, TVariables>,\n  lazy = false\n) {\n  const context = useContext(getApolloContext());\n  const [tick, forceUpdate] = useReducer(x => x + 1, 0);\n  const updatedOptions = options ? { ...options, query } : { query };\n\n  const queryDataRef = useRef<QueryData<TData, TVariables>>();\n  const queryData = queryDataRef.current || (\n    queryDataRef.current = new QueryData<TData, TVariables>({\n      options: updatedOptions as QueryDataOptions<TData, TVariables>,\n      context,\n      onNewData() {\n        if (!queryData.ssrInitiated()) {\n          // When new data is received from the `QueryData` object, we want to\n          // force a re-render to make sure the new data is displayed. We can't\n          // force that re-render if we're already rendering however so to be\n          // safe we'll trigger the re-render in a microtask. In case the\n          // component gets unmounted before this callback fires, we re-check\n          // queryDataRef.current.isMounted before calling forceUpdate().\n          Promise.resolve().then(() => queryDataRef.current && queryDataRef.current.isMounted && forceUpdate());\n        } else {\n          // If we're rendering on the server side we can force an update at\n          // any point.\n          forceUpdate();\n        }\n      }\n    })\n  );\n\n  queryData.setOptions(updatedOptions);\n  queryData.context = context;\n\n  // `onError` and `onCompleted` callback functions will not always have a\n  // stable identity, so we'll exclude them from the memoization key to\n  // prevent `afterExecute` from being triggered un-necessarily.\n  const memo = {\n    options: {\n      ...updatedOptions,\n      onError: void 0,\n      onCompleted: void 0\n    } as QueryHookOptions<TData, TVariables>,\n    context,\n    tick\n  };\n\n  const result = useDeepMemo(\n    () => (lazy ? queryData.executeLazy() : queryData.execute()),\n    memo\n  );\n\n  const queryResult = lazy\n    ? (result as QueryTuple<TData, TVariables>)[1]\n    : (result as QueryResult<TData, TVariables>);\n\n  if (__DEV__) {\n    // ensure we run an update after refreshing so that we reinitialize\n    useAfterFastRefresh(forceUpdate);\n  }\n\n  useEffect(() => {\n    return () => {\n      queryData.cleanup();\n      // this effect can run multiple times during a fast-refresh\n      // so make sure we clean up the ref\n      queryDataRef.current = void 0;\n    }\n  }, []);\n\n  useEffect(() => queryData.afterExecute({ lazy }), [\n    queryResult.loading,\n    queryResult.networkStatus,\n    queryResult.error,\n    queryResult.data,\n    queryData.currentObservable,\n  ]);\n\n  return result;\n}\n","import { useRef } from 'react';\nimport { equal } from '@wry/equality';\n\n/**\n * Memoize a result using deep equality. This hook has two advantages over\n * React.useMemo: it uses deep equality to compare memo keys, and it guarantees\n * that the memo function will only be called if the keys are unequal.\n * React.useMemo cannot be relied on to do this, since it is only a performance\n * optimization (see https://reactjs.org/docs/hooks-reference.html#usememo).\n */\nexport function useDeepMemo<TKey, TValue>(\n  memoFn: () => TValue,\n  key: TKey\n): TValue {\n  const ref = useRef<{ key: TKey; value: TValue }>();\n\n  if (!ref.current || !equal(key, ref.current.key)) {\n    ref.current = { key, value: memoFn() };\n  }\n\n  return ref.current.value;\n}\n","import '../../../utilities/globals';\nimport { useEffect, useRef } from \"react\";\n\n/**\n * This hook allows running a function only immediately after a react\n * fast refresh or live reload.\n *\n * Useful in order to ensure that we can reinitialize things that have been\n * disposed by cleanup functions in `useEffect`.\n * @param effectFn a function to run immediately after a fast refresh\n */\nexport function useAfterFastRefresh(effectFn: () => unknown) {\n  if (__DEV__) {\n    const didRefresh = useRef(false);\n    useEffect(() => {\n      return () => {\n        // Detect fast refresh, only runs multiple times in fast refresh\n        didRefresh.current = true;\n      };\n    }, []);\n\n    useEffect(() => {\n      if (didRefresh.current === true) {\n        // This block only runs after a fast refresh\n        didRefresh.current = false;\n        effectFn();\n      }\n    }, [])\n  }\n}\n","export const getDate = (time: string) => {\n  const itemDate = new Date(Math.floor(parseInt(time, 10) / 1000) * 1000);\n  const date =\n    itemDate.getFullYear() +\n    \"-\" +\n    (itemDate.getMonth() + 1 >= 10\n      ? itemDate.getMonth() + 1\n      : `0${itemDate.getMonth() + 1}`) +\n    \"-\" +\n    (itemDate.getDate() >= 10 ? itemDate.getDate() : `0${itemDate.getDate()}`);\n  return date;\n};\n\nexport const convertMonth = (name: string): string => {\n  switch (name) {\n    case \"Jan\":\n      return \"1\";\n    case \"Feb\":\n      return \"2\";\n    case \"Mar\":\n      return \"3\";\n    case \"Apr\":\n      return \"4\";\n    case \"May\":\n      return \"5\";\n    case \"Jun\":\n      return \"6\";\n    case \"Jul\":\n      return \"7\";\n    case \"Aug\":\n      return \"8\";\n    case \"Sep\":\n      return \"9\";\n    case \"Oct\":\n      return \"10\";\n    case \"Nov\":\n      return \"11\";\n    case \"Dec\":\n      return \"12\";\n    default:\n      return name;\n  }\n};\n\nexport const convertDay = (name: string): string => {\n  switch (name) {\n    case \"Sun\":\n      return \"일\";\n    case \"Mon\":\n      return \"월\";\n    case \"Tue\":\n      return \"화\";\n    case \"Wed\":\n      return \"수\";\n    case \"Thu\":\n      return \"목\";\n    case \"Fri\":\n      return \"금\";\n    case \"Sat\":\n      return \"토\";\n    case \"0\":\n      return \"일\";\n    case \"1\":\n      return \"월\";\n    case \"2\":\n      return \"화\";\n    case \"3\":\n      return \"수\";\n    case \"4\":\n      return \"목\";\n    case \"5\":\n      return \"금\";\n    case \"6\":\n      return \"토\";\n    default:\n      return name;\n  }\n};\n","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { SpaceContext } from '.';\nexport default function Item(_ref) {\n  var className = _ref.className,\n      direction = _ref.direction,\n      index = _ref.index,\n      marginDirection = _ref.marginDirection,\n      children = _ref.children,\n      split = _ref.split,\n      wrap = _ref.wrap;\n\n  var _React$useContext = React.useContext(SpaceContext),\n      horizontalSize = _React$useContext.horizontalSize,\n      verticalSize = _React$useContext.verticalSize,\n      latestIndex = _React$useContext.latestIndex,\n      supportFlexGap = _React$useContext.supportFlexGap;\n\n  var style = {};\n\n  if (!supportFlexGap) {\n    if (direction === 'vertical') {\n      if (index < latestIndex) {\n        style = {\n          marginBottom: horizontalSize / (split ? 2 : 1)\n        };\n      }\n    } else {\n      style = _extends(_extends({}, index < latestIndex && _defineProperty({}, marginDirection, horizontalSize / (split ? 2 : 1))), wrap && {\n        paddingBottom: verticalSize\n      });\n    }\n  }\n\n  if (children === null || children === undefined) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: className,\n    style: style\n  }, children), index < latestIndex && split && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"\".concat(className, \"-split\"),\n    style: style\n  }, split));\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport toArray from \"rc-util/es/Children/toArray\";\nimport { ConfigContext } from '../config-provider';\nimport Item from './Item';\nimport useFlexGapSupport from '../_util/hooks/useFlexGapSupport';\nexport var SpaceContext = /*#__PURE__*/React.createContext({\n  latestIndex: 0,\n  horizontalSize: 0,\n  verticalSize: 0,\n  supportFlexGap: false\n});\nvar spaceSize = {\n  small: 8,\n  middle: 16,\n  large: 24\n};\n\nfunction getNumberSize(size) {\n  return typeof size === 'string' ? spaceSize[size] : size || 0;\n}\n\nvar Space = function Space(props) {\n  var _classNames;\n\n  var _React$useContext = React.useContext(ConfigContext),\n      getPrefixCls = _React$useContext.getPrefixCls,\n      space = _React$useContext.space,\n      directionConfig = _React$useContext.direction;\n\n  var _props$size = props.size,\n      size = _props$size === void 0 ? (space === null || space === void 0 ? void 0 : space.size) || 'small' : _props$size,\n      align = props.align,\n      className = props.className,\n      children = props.children,\n      _props$direction = props.direction,\n      direction = _props$direction === void 0 ? 'horizontal' : _props$direction,\n      customizePrefixCls = props.prefixCls,\n      split = props.split,\n      style = props.style,\n      _props$wrap = props.wrap,\n      wrap = _props$wrap === void 0 ? false : _props$wrap,\n      otherProps = __rest(props, [\"size\", \"align\", \"className\", \"children\", \"direction\", \"prefixCls\", \"split\", \"style\", \"wrap\"]);\n\n  var supportFlexGap = useFlexGapSupport();\n\n  var _React$useMemo = React.useMemo(function () {\n    return (Array.isArray(size) ? size : [size, size]).map(function (item) {\n      return getNumberSize(item);\n    });\n  }, [size]),\n      _React$useMemo2 = _slicedToArray(_React$useMemo, 2),\n      horizontalSize = _React$useMemo2[0],\n      verticalSize = _React$useMemo2[1];\n\n  var childNodes = toArray(children, {\n    keepEmpty: true\n  });\n  var mergedAlign = align === undefined && direction === 'horizontal' ? 'center' : align;\n  var prefixCls = getPrefixCls('space', customizePrefixCls);\n  var cn = classNames(prefixCls, \"\".concat(prefixCls, \"-\").concat(direction), (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-rtl\"), directionConfig === 'rtl'), _defineProperty(_classNames, \"\".concat(prefixCls, \"-align-\").concat(mergedAlign), mergedAlign), _classNames), className);\n  var itemClassName = \"\".concat(prefixCls, \"-item\");\n  var marginDirection = directionConfig === 'rtl' ? 'marginLeft' : 'marginRight'; // Calculate latest one\n\n  var latestIndex = 0;\n  var nodes = childNodes.map(function (child, i) {\n    if (child !== null && child !== undefined) {\n      latestIndex = i;\n    }\n    /* eslint-disable react/no-array-index-key */\n\n\n    return /*#__PURE__*/React.createElement(Item, {\n      className: itemClassName,\n      key: \"\".concat(itemClassName, \"-\").concat(i),\n      direction: direction,\n      index: i,\n      marginDirection: marginDirection,\n      split: split,\n      wrap: wrap\n    }, child);\n    /* eslint-enable */\n  });\n  var spaceContext = React.useMemo(function () {\n    return {\n      horizontalSize: horizontalSize,\n      verticalSize: verticalSize,\n      latestIndex: latestIndex,\n      supportFlexGap: supportFlexGap\n    };\n  }, [horizontalSize, verticalSize, latestIndex, supportFlexGap]); // =========================== Render ===========================\n\n  if (childNodes.length === 0) {\n    return null;\n  }\n\n  var gapStyle = {};\n\n  if (wrap) {\n    gapStyle.flexWrap = 'wrap'; // Patch for gap not support\n\n    if (!supportFlexGap) {\n      gapStyle.marginBottom = -verticalSize;\n    }\n  }\n\n  if (supportFlexGap) {\n    gapStyle.columnGap = horizontalSize;\n    gapStyle.rowGap = verticalSize;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: cn,\n    style: _extends(_extends({}, gapStyle), style)\n  }, otherProps), /*#__PURE__*/React.createElement(SpaceContext.Provider, {\n    value: spaceContext\n  }, nodes));\n};\n\nexport default Space;","import styled from \"@emotion/styled\";\n\nexport const Container = styled.div``;\n","import { useLazyQuery, useMutation } from \"@apollo/client\";\nimport { Table, Space, Button } from \"antd\";\nimport Column from \"antd/lib/table/Column\";\nimport { useEffect, useState } from \"react\";\nimport { Link, useLocation, useParams } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport {\n  DELETE_BOARD,\n  GET_BOARD_BY_CATEGORY,\n} from \"../../../queries/adminQuery\";\nimport { getBoardByCategory } from \"../../../typings/api\";\nimport { getDate } from \"../../../utils/convertDate\";\nimport { Container } from \"./styles\";\n\ninterface ParamProps {\n  param: string;\n  subparam: string;\n}\ninterface TableBoardProps {\n  id: number | null;\n  index: number | null;\n  title: string | null;\n  createdAt: string | null;\n  category: string;\n}\n\ninterface LocationProps {\n  refresh?: boolean;\n}\n\nconst StoragePage = () => {\n  const { param, subparam } = useParams<ParamProps>();\n  const { state } = useLocation<LocationProps>();\n  const [boards, setBoards] = useState<Array<TableBoardProps>>();\n  const [getBoard, { loading, data, refetch }] =\n    useLazyQuery<getBoardByCategory>(GET_BOARD_BY_CATEGORY);\n\n  const [deleteBoard] = useMutation(DELETE_BOARD, {\n    onCompleted: ({ deleteBoard }) => {\n      const { ok, err } = deleteBoard;\n      if (ok) {\n        toast.success(\"게시물이 삭제 되었습니다\");\n        if (refetch) {\n          refetch();\n        }\n      } else {\n        toast.error(err);\n      }\n    },\n  });\n\n  useEffect(() => {\n    getBoard({ variables: { category: subparam } });\n  }, [getBoard, subparam]);\n\n  useEffect(() => {\n    const excuteRefetch = () => {\n      if (refetch) {\n        refetch();\n      }\n    };\n    if (state && state.refresh) {\n      excuteRefetch();\n    }\n    return () => excuteRefetch();\n  }, [refetch, state]);\n\n  useEffect(() => {\n    if (data && data.getBoardByCategory && data.getBoardByCategory.data) {\n      const res = data.getBoardByCategory.data;\n      const dataSource: Array<TableBoardProps> = [];\n      res.map((elem, i) => {\n        const obj: TableBoardProps = {\n          id: elem.id,\n          index: res.length - i,\n          title: elem.title,\n          createdAt: getDate(elem.createdAt || \"\"),\n          category: elem.category,\n        };\n        return dataSource.push(obj);\n      });\n      setBoards(dataSource);\n    }\n  }, [data]);\n\n  if (loading) {\n    return <>loading</>;\n  }\n\n  return (\n    <Container>\n      <Link\n        to={`/admin/${param}/create-${param}?category=${subparam}&param=${param}&subparam=${subparam}`}\n      >\n        <Button type=\"primary\" style={{ marginTop: 15, marginBottom: 20 }}>\n          글쓰기\n        </Button>\n      </Link>\n      <Table dataSource={boards} rowKey={\"id\"}>\n        <Column title=\"번호\" dataIndex=\"index\" key=\"index\" width={80} />\n        <Column\n          title=\"제목\"\n          dataIndex=\"title\"\n          key=\"title\"\n          ellipsis={true}\n          render={(text, record: TableBoardProps) => {\n            return (\n              <Space>\n                <Link\n                  to={`/admin/${param}/detail-${param}?category=${subparam}&id=${record.id}`}\n                >\n                  {text}\n                </Link>\n              </Space>\n            );\n          }}\n        />\n        <Column\n          title=\"작성일\"\n          dataIndex=\"createdAt\"\n          key=\"createdAt\"\n          width={150}\n        />\n        <Column\n          title=\"Action\"\n          key=\"action\"\n          width={150}\n          render={(text, record: TableBoardProps) => (\n            <Space size=\"middle\">\n              <Button\n                type=\"primary\"\n                danger\n                onClick={() => deleteBoard({ variables: { id: record.id } })}\n              >\n                삭제\n              </Button>\n            </Space>\n          )}\n        />\n      </Table>\n    </Container>\n  );\n};\n\nexport default StoragePage;\n","import { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\n\nimport { LazyQueryHookOptions, QueryTuple } from '../types/types';\nimport { useBaseQuery } from './utils/useBaseQuery';\nimport { OperationVariables } from '../../core';\n\nexport function useLazyQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: LazyQueryHookOptions<TData, TVariables>\n) {\n  return useBaseQuery<TData, TVariables>(query, options, true) as QueryTuple<\n    TData,\n    TVariables\n  >;\n}\n"],"sourceRoot":""}